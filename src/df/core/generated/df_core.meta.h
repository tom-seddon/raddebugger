// Copyright (c) 2024 Epic Games Tools
// Licensed under the MIT license (https://opensource.org/license/mit/)

//- GENERATED CODE

#ifndef DF_CORE_META_H
#define DF_CORE_META_H

typedef enum DF_CfgSrc
{
DF_CfgSrc_User,
DF_CfgSrc_Profile,
DF_CfgSrc_CommandLine,
DF_CfgSrc_Transient,
DF_CfgSrc_COUNT
} DF_CfgSrc;

typedef enum DF_EntityKind
{
DF_EntityKind_Nil,
DF_EntityKind_Root,
DF_EntityKind_Machine,
DF_EntityKind_File,
DF_EntityKind_OverrideFileLink,
DF_EntityKind_PendingFileChange,
DF_EntityKind_DiagLog,
DF_EntityKind_FlashMarker,
DF_EntityKind_WatchPin,
DF_EntityKind_Breakpoint,
DF_EntityKind_Condition,
DF_EntityKind_Target,
DF_EntityKind_Executable,
DF_EntityKind_Arguments,
DF_EntityKind_ExecutionPath,
DF_EntityKind_EntryPointName,
DF_EntityKind_Source,
DF_EntityKind_Dest,
DF_EntityKind_CtrlRequest,
DF_EntityKind_Process,
DF_EntityKind_Thread,
DF_EntityKind_Module,
DF_EntityKind_DebugInfoOverride,
DF_EntityKind_PendingThreadName,
DF_EntityKind_ConversionTask,
DF_EntityKind_ConversionFail,
DF_EntityKind_EndedProcess,
DF_EntityKind_COUNT
} DF_EntityKind;

typedef enum DF_NameKind
{
DF_NameKind_Null,
DF_NameKind_EntityName,
DF_NameKind_EntityKindName,
DF_NameKind_COUNT
} DF_NameKind;

typedef enum DF_CoreCmdKind
{
DF_CoreCmdKind_Null,
DF_CoreCmdKind_Exit,
DF_CoreCmdKind_RunCommand,
DF_CoreCmdKind_Error,
DF_CoreCmdKind_LaunchAndRun,
DF_CoreCmdKind_LaunchAndInit,
DF_CoreCmdKind_Kill,
DF_CoreCmdKind_KillAll,
DF_CoreCmdKind_Detach,
DF_CoreCmdKind_Continue,
DF_CoreCmdKind_StepIntoInst,
DF_CoreCmdKind_StepOverInst,
DF_CoreCmdKind_StepIntoLine,
DF_CoreCmdKind_StepOverLine,
DF_CoreCmdKind_StepOut,
DF_CoreCmdKind_Halt,
DF_CoreCmdKind_SoftHaltRefresh,
DF_CoreCmdKind_SetThreadIP,
DF_CoreCmdKind_RunToLine,
DF_CoreCmdKind_RunToAddress,
DF_CoreCmdKind_Run,
DF_CoreCmdKind_Restart,
DF_CoreCmdKind_StepInto,
DF_CoreCmdKind_StepOver,
DF_CoreCmdKind_RunToCursor,
DF_CoreCmdKind_SetNextStatement,
DF_CoreCmdKind_EnableSoloSteppingMode,
DF_CoreCmdKind_DisableSoloSteppingMode,
DF_CoreCmdKind_SelectThread,
DF_CoreCmdKind_SelectThreadWindow,
DF_CoreCmdKind_SelectThreadView,
DF_CoreCmdKind_SelectUnwind,
DF_CoreCmdKind_UpOneFrame,
DF_CoreCmdKind_DownOneFrame,
DF_CoreCmdKind_FreezeThread,
DF_CoreCmdKind_ThawThread,
DF_CoreCmdKind_FreezeProcess,
DF_CoreCmdKind_ThawProcess,
DF_CoreCmdKind_FreezeMachine,
DF_CoreCmdKind_ThawMachine,
DF_CoreCmdKind_FreezeLocalMachine,
DF_CoreCmdKind_ThawLocalMachine,
DF_CoreCmdKind_IncUIFontScale,
DF_CoreCmdKind_DecUIFontScale,
DF_CoreCmdKind_IncCodeFontScale,
DF_CoreCmdKind_DecCodeFontScale,
DF_CoreCmdKind_OpenWindow,
DF_CoreCmdKind_CloseWindow,
DF_CoreCmdKind_ToggleFullscreen,
DF_CoreCmdKind_ConfirmAccept,
DF_CoreCmdKind_ConfirmCancel,
DF_CoreCmdKind_ResetToDefaultPanels,
DF_CoreCmdKind_NewPanelRight,
DF_CoreCmdKind_NewPanelDown,
DF_CoreCmdKind_RotatePanelColumns,
DF_CoreCmdKind_NextPanel,
DF_CoreCmdKind_PrevPanel,
DF_CoreCmdKind_FocusPanel,
DF_CoreCmdKind_FocusPanelRight,
DF_CoreCmdKind_FocusPanelLeft,
DF_CoreCmdKind_FocusPanelUp,
DF_CoreCmdKind_FocusPanelDown,
DF_CoreCmdKind_Undo,
DF_CoreCmdKind_Redo,
DF_CoreCmdKind_GoBack,
DF_CoreCmdKind_GoForward,
DF_CoreCmdKind_ClosePanel,
DF_CoreCmdKind_NextTab,
DF_CoreCmdKind_PrevTab,
DF_CoreCmdKind_MoveTabRight,
DF_CoreCmdKind_MoveTabLeft,
DF_CoreCmdKind_OpenTab,
DF_CoreCmdKind_CloseTab,
DF_CoreCmdKind_MoveTab,
DF_CoreCmdKind_TabBarTop,
DF_CoreCmdKind_TabBarBottom,
DF_CoreCmdKind_SetCurrentPath,
DF_CoreCmdKind_Open,
DF_CoreCmdKind_Reload,
DF_CoreCmdKind_ReloadActive,
DF_CoreCmdKind_Switch,
DF_CoreCmdKind_SwitchToPartnerFile,
DF_CoreCmdKind_SetFileOverrideLinkSrc,
DF_CoreCmdKind_SetFileOverrideLinkDst,
DF_CoreCmdKind_SetFileReplacementPath,
DF_CoreCmdKind_OpenUser,
DF_CoreCmdKind_OpenProfile,
DF_CoreCmdKind_ApplyUserData,
DF_CoreCmdKind_ApplyProfileData,
DF_CoreCmdKind_WriteUserData,
DF_CoreCmdKind_WriteProfileData,
DF_CoreCmdKind_MoveLeft,
DF_CoreCmdKind_MoveRight,
DF_CoreCmdKind_MoveUp,
DF_CoreCmdKind_MoveDown,
DF_CoreCmdKind_MoveLeftSelect,
DF_CoreCmdKind_MoveRightSelect,
DF_CoreCmdKind_MoveUpSelect,
DF_CoreCmdKind_MoveDownSelect,
DF_CoreCmdKind_MoveLeftChunk,
DF_CoreCmdKind_MoveRightChunk,
DF_CoreCmdKind_MoveUpChunk,
DF_CoreCmdKind_MoveDownChunk,
DF_CoreCmdKind_MoveUpPage,
DF_CoreCmdKind_MoveDownPage,
DF_CoreCmdKind_MoveUpWhole,
DF_CoreCmdKind_MoveDownWhole,
DF_CoreCmdKind_MoveLeftChunkSelect,
DF_CoreCmdKind_MoveRightChunkSelect,
DF_CoreCmdKind_MoveUpChunkSelect,
DF_CoreCmdKind_MoveDownChunkSelect,
DF_CoreCmdKind_MoveUpPageSelect,
DF_CoreCmdKind_MoveDownPageSelect,
DF_CoreCmdKind_MoveUpWholeSelect,
DF_CoreCmdKind_MoveDownWholeSelect,
DF_CoreCmdKind_MoveHome,
DF_CoreCmdKind_MoveEnd,
DF_CoreCmdKind_MoveHomeSelect,
DF_CoreCmdKind_MoveEndSelect,
DF_CoreCmdKind_SelectAll,
DF_CoreCmdKind_DeleteSingle,
DF_CoreCmdKind_DeleteChunk,
DF_CoreCmdKind_BackspaceSingle,
DF_CoreCmdKind_BackspaceChunk,
DF_CoreCmdKind_Copy,
DF_CoreCmdKind_Cut,
DF_CoreCmdKind_Paste,
DF_CoreCmdKind_InsertText,
DF_CoreCmdKind_GoToLine,
DF_CoreCmdKind_GoToAddress,
DF_CoreCmdKind_CenterCursor,
DF_CoreCmdKind_ContainCursor,
DF_CoreCmdKind_FindTextForward,
DF_CoreCmdKind_FindTextBackward,
DF_CoreCmdKind_FindNext,
DF_CoreCmdKind_FindPrev,
DF_CoreCmdKind_FindThread,
DF_CoreCmdKind_FindSelectedThread,
DF_CoreCmdKind_GoToName,
DF_CoreCmdKind_GoToNameAtCursor,
DF_CoreCmdKind_ToggleWatchExpression,
DF_CoreCmdKind_ToggleWatchExpressionAtCursor,
DF_CoreCmdKind_SetColumns,
DF_CoreCmdKind_ToggleAddressVisibility,
DF_CoreCmdKind_ToggleCodeBytesVisibility,
DF_CoreCmdKind_EnableEntity,
DF_CoreCmdKind_DisableEntity,
DF_CoreCmdKind_FreezeEntity,
DF_CoreCmdKind_ThawEntity,
DF_CoreCmdKind_RemoveEntity,
DF_CoreCmdKind_NameEntity,
DF_CoreCmdKind_EditEntity,
DF_CoreCmdKind_DuplicateEntity,
DF_CoreCmdKind_TextBreakpoint,
DF_CoreCmdKind_AddressBreakpoint,
DF_CoreCmdKind_FunctionBreakpoint,
DF_CoreCmdKind_ToggleBreakpointAtCursor,
DF_CoreCmdKind_RemoveBreakpoint,
DF_CoreCmdKind_EnableBreakpoint,
DF_CoreCmdKind_DisableBreakpoint,
DF_CoreCmdKind_ToggleWatchPin,
DF_CoreCmdKind_ToggleWatchPinAtCursor,
DF_CoreCmdKind_AddTarget,
DF_CoreCmdKind_RemoveTarget,
DF_CoreCmdKind_EditTarget,
DF_CoreCmdKind_SelectTarget,
DF_CoreCmdKind_EnableTarget,
DF_CoreCmdKind_DisableTarget,
DF_CoreCmdKind_RetryEndedProcess,
DF_CoreCmdKind_Attach,
DF_CoreCmdKind_RegisterAsJITDebugger,
DF_CoreCmdKind_EntityRefFastPath,
DF_CoreCmdKind_SpawnEntityView,
DF_CoreCmdKind_FindCodeLocation,
DF_CoreCmdKind_Filter,
DF_CoreCmdKind_ApplyFilter,
DF_CoreCmdKind_ClearFilter,
DF_CoreCmdKind_Commands,
DF_CoreCmdKind_Target,
DF_CoreCmdKind_Targets,
DF_CoreCmdKind_FilePathMap,
DF_CoreCmdKind_Scheduler,
DF_CoreCmdKind_CallStack,
DF_CoreCmdKind_Modules,
DF_CoreCmdKind_PendingEntity,
DF_CoreCmdKind_Code,
DF_CoreCmdKind_Watch,
DF_CoreCmdKind_Locals,
DF_CoreCmdKind_Registers,
DF_CoreCmdKind_Globals,
DF_CoreCmdKind_ThreadLocals,
DF_CoreCmdKind_Types,
DF_CoreCmdKind_Procedures,
DF_CoreCmdKind_Output,
DF_CoreCmdKind_Memory,
DF_CoreCmdKind_Disassembly,
DF_CoreCmdKind_Breakpoints,
DF_CoreCmdKind_WatchPins,
DF_CoreCmdKind_ExceptionFilters,
DF_CoreCmdKind_Theme,
DF_CoreCmdKind_PickFile,
DF_CoreCmdKind_PickFolder,
DF_CoreCmdKind_PickFileOrFolder,
DF_CoreCmdKind_CompleteQuery,
DF_CoreCmdKind_CancelQuery,
DF_CoreCmdKind_ToggleDevMenu,
DF_CoreCmdKind_COUNT
} DF_CoreCmdKind;

typedef enum DF_IconKind
{
DF_IconKind_Null,
DF_IconKind_FolderOpenOutline,
DF_IconKind_FolderClosedOutline,
DF_IconKind_FolderOpenFilled,
DF_IconKind_FolderClosedFilled,
DF_IconKind_FileOutline,
DF_IconKind_FileFilled,
DF_IconKind_Play,
DF_IconKind_PlayStepForward,
DF_IconKind_Pause,
DF_IconKind_Stop,
DF_IconKind_Info,
DF_IconKind_WarningSmall,
DF_IconKind_WarningBig,
DF_IconKind_Unlocked,
DF_IconKind_Locked,
DF_IconKind_LeftArrow,
DF_IconKind_RightArrow,
DF_IconKind_UpArrow,
DF_IconKind_DownArrow,
DF_IconKind_Gear,
DF_IconKind_Pencil,
DF_IconKind_Trash,
DF_IconKind_Pin,
DF_IconKind_RadioHollow,
DF_IconKind_RadioFilled,
DF_IconKind_CheckHollow,
DF_IconKind_CheckFilled,
DF_IconKind_LeftCaret,
DF_IconKind_RightCaret,
DF_IconKind_UpCaret,
DF_IconKind_DownCaret,
DF_IconKind_UpScroll,
DF_IconKind_DownScroll,
DF_IconKind_LeftScroll,
DF_IconKind_RightScroll,
DF_IconKind_Add,
DF_IconKind_Minus,
DF_IconKind_Thread,
DF_IconKind_Threads,
DF_IconKind_Machine,
DF_IconKind_CircleFilled,
DF_IconKind_X,
DF_IconKind_Refresh,
DF_IconKind_Undo,
DF_IconKind_Redo,
DF_IconKind_Save,
DF_IconKind_Window,
DF_IconKind_Target,
DF_IconKind_Clipboard,
DF_IconKind_Scheduler,
DF_IconKind_Module,
DF_IconKind_XSplit,
DF_IconKind_YSplit,
DF_IconKind_ClosePanel,
DF_IconKind_StepInto,
DF_IconKind_StepOver,
DF_IconKind_StepOut,
DF_IconKind_Find,
DF_IconKind_Palette,
DF_IconKind_Thumbnails,
DF_IconKind_Glasses,
DF_IconKind_Binoculars,
DF_IconKind_List,
DF_IconKind_Grid,
DF_IconKind_QuestionMark,
DF_IconKind_Person,
DF_IconKind_Briefcase,
DF_IconKind_Dot,
DF_IconKind_COUNT
} DF_IconKind;

typedef enum DF_CoreViewRuleKind
{
DF_CoreViewRuleKind_Null,
DF_CoreViewRuleKind_Array,
DF_CoreViewRuleKind_List,
DF_CoreViewRuleKind_ByteSwap,
DF_CoreViewRuleKind_BaseDec,
DF_CoreViewRuleKind_BaseBin,
DF_CoreViewRuleKind_BaseOct,
DF_CoreViewRuleKind_BaseHex,
DF_CoreViewRuleKind_Only,
DF_CoreViewRuleKind_Omit,
DF_CoreViewRuleKind_NoAddr,
DF_CoreViewRuleKind_RGBA,
DF_CoreViewRuleKind_Text,
DF_CoreViewRuleKind_Disasm,
DF_CoreViewRuleKind_Bitmap,
DF_CoreViewRuleKind_Geo,
DF_CoreViewRuleKind_COUNT
} DF_CoreViewRuleKind;

typedef enum DF_CmdParamSlot
{
DF_CmdParamSlot_Null,
DF_CmdParamSlot_Window,
DF_CmdParamSlot_Panel,
DF_CmdParamSlot_DestPanel,
DF_CmdParamSlot_PrevView,
DF_CmdParamSlot_View,
DF_CmdParamSlot_Entity,
DF_CmdParamSlot_EntityList,
DF_CmdParamSlot_String,
DF_CmdParamSlot_FilePath,
DF_CmdParamSlot_TextPoint,
DF_CmdParamSlot_CmdSpec,
DF_CmdParamSlot_ViewSpec,
DF_CmdParamSlot_VirtualAddr,
DF_CmdParamSlot_VirtualOff,
DF_CmdParamSlot_Index,
DF_CmdParamSlot_ID,
DF_CmdParamSlot_PreferDisassembly,
DF_CmdParamSlot_ForceConfirm,
DF_CmdParamSlot_COUNT
} DF_CmdParamSlot;

typedef struct DF_CmdParams DF_CmdParams;
struct DF_CmdParams
{
U64 slot_props[(DF_CmdParamSlot_COUNT + 63) / 64];
DF_Handle window;
DF_Handle panel;
DF_Handle dest_panel;
DF_Handle prev_view;
DF_Handle view;
DF_Handle entity;
DF_HandleList entity_list;
String8 string;
String8 file_path;
TxtPt text_point;
struct DF_CmdSpec * cmd_spec;
struct DF_ViewSpec * view_spec;
U64 vaddr;
U64 voff;
U64 index;
U64 id;
B32 prefer_dasm;
B32 force_confirm;
};

DF_CORE_VIEW_RULE_EVAL_RESOLUTION_FUNCTION_DEF(array);
DF_CORE_VIEW_RULE_EVAL_RESOLUTION_FUNCTION_DEF(bswap);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(list);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(only);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(omit);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(rgba);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(text);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(disasm);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(bitmap);
DF_CORE_VIEW_RULE_VIZ_BLOCK_PROD_FUNCTION_DEF(geo);

struct{String8 mnemonic; String8 summary;} df_g_inst_table_x64[] =
{
{str8_lit_comp("AAA"), str8_lit_comp("ASCII Adjust After Addition")},
{str8_lit_comp("AAD"), str8_lit_comp("ASCII Adjust AX Before Division")},
{str8_lit_comp("AAM"), str8_lit_comp("ASCII Adjust AX After Multiply")},
{str8_lit_comp("AAS"), str8_lit_comp("ASCII Adjust AL After Subtraction")},
{str8_lit_comp("ADC"), str8_lit_comp("Add with Carry")},
{str8_lit_comp("ADCX"), str8_lit_comp("Unsigned Integer Addition of Two Operands with Carry Flag")},
{str8_lit_comp("ADD"), str8_lit_comp("Add")},
{str8_lit_comp("ADDPD"), str8_lit_comp("Add Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("ADDPS"), str8_lit_comp("Add Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("ADDSD"), str8_lit_comp("Add Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("ADDSS"), str8_lit_comp("Add Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("ADDSUBPD"), str8_lit_comp("Packed Double-FP Add/Subtract")},
{str8_lit_comp("ADDSUBPS"), str8_lit_comp("Packed Single-FP Add/Subtract")},
{str8_lit_comp("ADOX"), str8_lit_comp("Unsigned Integer Addition of Two Operands with Overflow Flag")},
{str8_lit_comp("AESDEC"), str8_lit_comp("Perform One Round of an AES Decryption Flow")},
{str8_lit_comp("AESDEC128KL"), str8_lit_comp("Perform Ten Rounds of AES Decryption Flow with Key Locker Using 128-Bit Key")},
{str8_lit_comp("AESDEC256KL"), str8_lit_comp("Perform 14 Rounds of AES Decryption Flow with Key Locker Using 256-Bit Key")},
{str8_lit_comp("AESDECLAST"), str8_lit_comp("Perform Last Round of an AES Decryption Flow")},
{str8_lit_comp("AESDECWIDE128KL"), str8_lit_comp("Perform Ten Rounds of AES Decryption Flow with Key Locker on 8 Blocks Using 128-Bit Key")},
{str8_lit_comp("AESDECWIDE256KL"), str8_lit_comp("Perform 14 Rounds of AES Decryption Flow with Key Locker on 8 Blocks Using 256-Bit Key")},
{str8_lit_comp("AESENC"), str8_lit_comp("Perform One Round of an AES Encryption Flow")},
{str8_lit_comp("AESENC128KL"), str8_lit_comp("Perform Ten Rounds of AES Encryption Flow with Key Locker Using 128-Bit Key")},
{str8_lit_comp("AESENC256KL"), str8_lit_comp("Perform 14 Rounds of AES Encryption Flow with Key Locker Using 256-Bit Key")},
{str8_lit_comp("AESENCLAST"), str8_lit_comp("Perform Last Round of an AES Encryption Flow")},
{str8_lit_comp("AESENCWIDE128KL"), str8_lit_comp("Perform Ten Rounds of AES Encryption Flow with Key Locker on 8 Blocks Using 128-Bit Key")},
{str8_lit_comp("AESENCWIDE256KL"), str8_lit_comp("Perform 14 Rounds of AES Encryption Flow with Key Locker on 8 Blocks Using 256-Bit Key")},
{str8_lit_comp("AESIMC"), str8_lit_comp("Perform the AES InvMixColumn Transformation")},
{str8_lit_comp("AESKEYGENASSIST"), str8_lit_comp("AES Round Key Generation Assist")},
{str8_lit_comp("AND"), str8_lit_comp("Logical AND")},
{str8_lit_comp("ANDN"), str8_lit_comp("Logical AND NOT")},
{str8_lit_comp("ANDNPD"), str8_lit_comp("Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values")},
{str8_lit_comp("ANDNPS"), str8_lit_comp("Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values")},
{str8_lit_comp("ANDPD"), str8_lit_comp("Bitwise Logical AND of Packed Double Precision Floating-Point Values")},
{str8_lit_comp("ANDPS"), str8_lit_comp("Bitwise Logical AND of Packed Single Precision Floating-Point Values")},
{str8_lit_comp("ARPL"), str8_lit_comp("Adjust RPL Field of Segment Selector")},
{str8_lit_comp("BEXTR"), str8_lit_comp("Bit Field Extract")},
{str8_lit_comp("BLENDPD"), str8_lit_comp("Blend Packed Double Precision Floating-Point Values")},
{str8_lit_comp("BLENDPS"), str8_lit_comp("Blend Packed Single Precision Floating-Point Values")},
{str8_lit_comp("BLENDVPD"), str8_lit_comp("Variable Blend Packed Double Precision Floating-Point Values")},
{str8_lit_comp("BLENDVPS"), str8_lit_comp("Variable Blend Packed Single Precision Floating-Point Values")},
{str8_lit_comp("BLSI"), str8_lit_comp("Extract Lowest Set Isolated Bit")},
{str8_lit_comp("BLSMSK"), str8_lit_comp("Get Mask Up to Lowest Set Bit")},
{str8_lit_comp("BLSR"), str8_lit_comp("Reset Lowest Set Bit")},
{str8_lit_comp("BNDCL"), str8_lit_comp("Check Lower Bound")},
{str8_lit_comp("BNDCN"), str8_lit_comp("Check Upper Bound")},
{str8_lit_comp("BNDCU"), str8_lit_comp("Check Upper Bound")},
{str8_lit_comp("BNDLDX"), str8_lit_comp("Load Extended Bounds Using Address Translation")},
{str8_lit_comp("BNDMK"), str8_lit_comp("Make Bounds")},
{str8_lit_comp("BNDMOV"), str8_lit_comp("Move Bounds")},
{str8_lit_comp("BNDSTX"), str8_lit_comp("Store Extended Bounds Using Address Translation")},
{str8_lit_comp("BOUND"), str8_lit_comp("Check Array Index Against Bounds")},
{str8_lit_comp("BSF"), str8_lit_comp("Bit Scan Forward")},
{str8_lit_comp("BSR"), str8_lit_comp("Bit Scan Reverse")},
{str8_lit_comp("BSWAP"), str8_lit_comp("Byte Swap")},
{str8_lit_comp("BT"), str8_lit_comp("Bit Test")},
{str8_lit_comp("BTC"), str8_lit_comp("Bit Test and Complement")},
{str8_lit_comp("BTR"), str8_lit_comp("Bit Test and Reset")},
{str8_lit_comp("BTS"), str8_lit_comp("Bit Test and Set")},
{str8_lit_comp("BZHI"), str8_lit_comp("Zero High Bits Starting with Specified Bit Position")},
{str8_lit_comp("CALL"), str8_lit_comp("Call Procedure")},
{str8_lit_comp("CBW"), str8_lit_comp("Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword")},
{str8_lit_comp("CDQ"), str8_lit_comp("Convert Word to Doubleword/Convert Doubleword to Quadword")},
{str8_lit_comp("CDQE"), str8_lit_comp("Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword")},
{str8_lit_comp("CLAC"), str8_lit_comp("Clear AC Flag in EFLAGS Register")},
{str8_lit_comp("CLC"), str8_lit_comp("Clear Carry Flag")},
{str8_lit_comp("CLD"), str8_lit_comp("Clear Direction Flag")},
{str8_lit_comp("CLDEMOTE"), str8_lit_comp("Cache Line Demote")},
{str8_lit_comp("CLFLUSH"), str8_lit_comp("Flush Cache Line")},
{str8_lit_comp("CLFLUSHOPT"), str8_lit_comp("Flush Cache Line Optimized")},
{str8_lit_comp("CLI"), str8_lit_comp("Clear Interrupt Flag")},
{str8_lit_comp("CLRSSBSY"), str8_lit_comp("Clear Busy Flag in a Supervisor Shadow Stack Token")},
{str8_lit_comp("CLTS"), str8_lit_comp("Clear Task-Switched Flag in CR0")},
{str8_lit_comp("CLWB"), str8_lit_comp("Cache Line Write Back")},
{str8_lit_comp("CMC"), str8_lit_comp("Complement Carry Flag")},
{str8_lit_comp("CMOVcc"), str8_lit_comp("Conditional Move")},
{str8_lit_comp("CMP"), str8_lit_comp("Compare Two Operands")},
{str8_lit_comp("CMPPD"), str8_lit_comp("Compare Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("CMPPS"), str8_lit_comp("Compare Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("CMPS"), str8_lit_comp("Compare String Operands")},
{str8_lit_comp("CMPSB"), str8_lit_comp("Compare String Operands")},
{str8_lit_comp("CMPSD"), str8_lit_comp("Compare String Operands")},
{str8_lit_comp("CMPSQ"), str8_lit_comp("Compare String Operands")},
{str8_lit_comp("CMPSS"), str8_lit_comp("Compare Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("CMPSW"), str8_lit_comp("Compare String Operands")},
{str8_lit_comp("CMPXCHG"), str8_lit_comp("Compare and Exchange")},
{str8_lit_comp("CMPXCHG16B"), str8_lit_comp("Compare and Exchange Bytes")},
{str8_lit_comp("CMPXCHG8B"), str8_lit_comp("Compare and Exchange Bytes")},
{str8_lit_comp("COMISD"), str8_lit_comp("Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS")},
{str8_lit_comp("COMISS"), str8_lit_comp("Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS")},
{str8_lit_comp("CPUID"), str8_lit_comp("CPU Identification")},
{str8_lit_comp("CQO"), str8_lit_comp("Convert Word to Doubleword/Convert Doubleword to Quadword")},
{str8_lit_comp("CRC32"), str8_lit_comp("Accumulate CRC32 Value")},
{str8_lit_comp("CVTDQ2PD"), str8_lit_comp("Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("CVTDQ2PS"), str8_lit_comp("Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("CVTPD2DQ"), str8_lit_comp("Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers")},
{str8_lit_comp("CVTPD2PI"), str8_lit_comp("Convert Packed Double-Precision FP Values to Packed Dword Integers")},
{str8_lit_comp("CVTPD2PS"), str8_lit_comp("Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("CVTPI2PD"), str8_lit_comp("Convert Packed Dword Integers to Packed Double-Precision FP Values")},
{str8_lit_comp("CVTPI2PS"), str8_lit_comp("Convert Packed Dword Integers to Packed Single-Precision FP Values")},
{str8_lit_comp("CVTPS2DQ"), str8_lit_comp("Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values")},
{str8_lit_comp("CVTPS2PD"), str8_lit_comp("Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("CVTPS2PI"), str8_lit_comp("Convert Packed Single-Precision FP Values to Packed Dword Integers")},
{str8_lit_comp("CVTSD2SI"), str8_lit_comp("Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer")},
{str8_lit_comp("CVTSD2SS"), str8_lit_comp("Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("CVTSI2SD"), str8_lit_comp("Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("CVTSI2SS"), str8_lit_comp("Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("CVTSS2SD"), str8_lit_comp("Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("CVTSS2SI"), str8_lit_comp("Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer")},
{str8_lit_comp("CVTTPD2DQ"), str8_lit_comp("Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers")},
{str8_lit_comp("CVTTPD2PI"), str8_lit_comp("Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers")},
{str8_lit_comp("CVTTPS2DQ"), str8_lit_comp("Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values")},
{str8_lit_comp("CVTTPS2PI"), str8_lit_comp("Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers")},
{str8_lit_comp("CVTTSD2SI"), str8_lit_comp("Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Integer")},
{str8_lit_comp("CVTTSS2SI"), str8_lit_comp("Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer")},
{str8_lit_comp("CWD"), str8_lit_comp("Convert Word to Doubleword/Convert Doubleword to Quadword")},
{str8_lit_comp("CWDE"), str8_lit_comp("Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword")},
{str8_lit_comp("DAA"), str8_lit_comp("Decimal Adjust AL after Addition")},
{str8_lit_comp("DAS"), str8_lit_comp("Decimal Adjust AL after Subtraction")},
{str8_lit_comp("DEC"), str8_lit_comp("Decrement by 1")},
{str8_lit_comp("DIV"), str8_lit_comp("Unsigned Divide")},
{str8_lit_comp("DIVPD"), str8_lit_comp("Divide Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("DIVPS"), str8_lit_comp("Divide Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("DIVSD"), str8_lit_comp("Divide Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("DIVSS"), str8_lit_comp("Divide Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("DPPD"), str8_lit_comp("Dot Product of Packed Double Precision Floating-Point Values")},
{str8_lit_comp("DPPS"), str8_lit_comp("Dot Product of Packed Single Precision Floating-Point Values")},
{str8_lit_comp("EMMS"), str8_lit_comp("Empty MMX Technology State")},
{str8_lit_comp("ENCODEKEY128"), str8_lit_comp("Encode 128-Bit Key with Key Locker")},
{str8_lit_comp("ENCODEKEY256"), str8_lit_comp("Encode 256-Bit Key with Key Locker")},
{str8_lit_comp("ENDBR32"), str8_lit_comp("Terminate an Indirect Branch in 32-bit and Compatibility Mode")},
{str8_lit_comp("ENDBR64"), str8_lit_comp("Terminate an Indirect Branch in 64-bit Mode")},
{str8_lit_comp("ENTER"), str8_lit_comp("Make Stack Frame for Procedure Parameters")},
{str8_lit_comp("EXTRACTPS"), str8_lit_comp("Extract Packed Floating-Point Values")},
{str8_lit_comp("F2XM1"), str8_lit_comp("Compute 2x–1")},
{str8_lit_comp("FABS"), str8_lit_comp("Absolute Value")},
{str8_lit_comp("FADD"), str8_lit_comp("Add")},
{str8_lit_comp("FADDP"), str8_lit_comp("Add")},
{str8_lit_comp("FBLD"), str8_lit_comp("Load Binary Coded Decimal")},
{str8_lit_comp("FBSTP"), str8_lit_comp("Store BCD Integer and Pop")},
{str8_lit_comp("FCHS"), str8_lit_comp("Change Sign")},
{str8_lit_comp("FCLEX"), str8_lit_comp("Clear Exceptions")},
{str8_lit_comp("FCMOVcc"), str8_lit_comp("Floating-Point Conditional Move")},
{str8_lit_comp("FCOM"), str8_lit_comp("Compare Floating Point Values")},
{str8_lit_comp("FCOMI"), str8_lit_comp("Compare Floating Point Values and Set EFLAGS")},
{str8_lit_comp("FCOMIP"), str8_lit_comp("Compare Floating Point Values and Set EFLAGS")},
{str8_lit_comp("FCOMP"), str8_lit_comp("Compare Floating Point Values")},
{str8_lit_comp("FCOMPP"), str8_lit_comp("Compare Floating Point Values")},
{str8_lit_comp("FCOS"), str8_lit_comp("Cosine")},
{str8_lit_comp("FDECSTP"), str8_lit_comp("Decrement Stack-Top Pointer")},
{str8_lit_comp("FDIV"), str8_lit_comp("Divide")},
{str8_lit_comp("FDIVP"), str8_lit_comp("Divide")},
{str8_lit_comp("FDIVR"), str8_lit_comp("Reverse Divide")},
{str8_lit_comp("FDIVRP"), str8_lit_comp("Reverse Divide")},
{str8_lit_comp("FFREE"), str8_lit_comp("Free Floating-Point Register")},
{str8_lit_comp("FIADD"), str8_lit_comp("Add")},
{str8_lit_comp("FICOM"), str8_lit_comp("Compare Integer")},
{str8_lit_comp("FICOMP"), str8_lit_comp("Compare Integer")},
{str8_lit_comp("FIDIV"), str8_lit_comp("Divide")},
{str8_lit_comp("FIDIVR"), str8_lit_comp("Reverse Divide")},
{str8_lit_comp("FILD"), str8_lit_comp("Load Integer")},
{str8_lit_comp("FIMUL"), str8_lit_comp("Multiply")},
{str8_lit_comp("FINCSTP"), str8_lit_comp("Increment Stack-Top Pointer")},
{str8_lit_comp("FINIT"), str8_lit_comp("Initialize Floating-Point Unit")},
{str8_lit_comp("FIST"), str8_lit_comp("Store Integer")},
{str8_lit_comp("FISTP"), str8_lit_comp("Store Integer")},
{str8_lit_comp("FISTTP"), str8_lit_comp("Store Integer with Truncation")},
{str8_lit_comp("FISUB"), str8_lit_comp("Subtract")},
{str8_lit_comp("FISUBR"), str8_lit_comp("Reverse Subtract")},
{str8_lit_comp("FLD"), str8_lit_comp("Load Floating Point Value")},
{str8_lit_comp("FLD1"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FLDCW"), str8_lit_comp("Load x87 FPU Control Word")},
{str8_lit_comp("FLDENV"), str8_lit_comp("Load x87 FPU Environment")},
{str8_lit_comp("FLDL2E"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FLDL2T"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FLDLG2"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FLDLN2"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FLDPI"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FLDZ"), str8_lit_comp("Load Constant")},
{str8_lit_comp("FMUL"), str8_lit_comp("Multiply")},
{str8_lit_comp("FMULP"), str8_lit_comp("Multiply")},
{str8_lit_comp("FNCLEX"), str8_lit_comp("Clear Exceptions")},
{str8_lit_comp("FNINIT"), str8_lit_comp("Initialize Floating-Point Unit")},
{str8_lit_comp("FNOP"), str8_lit_comp("No Operation")},
{str8_lit_comp("FNSAVE"), str8_lit_comp("Store x87 FPU State")},
{str8_lit_comp("FNSTCW"), str8_lit_comp("Store x87 FPU Control Word")},
{str8_lit_comp("FNSTENV"), str8_lit_comp("Store x87 FPU Environment")},
{str8_lit_comp("FNSTSW"), str8_lit_comp("Store x87 FPU Status Word")},
{str8_lit_comp("FPATAN"), str8_lit_comp("Partial Arctangent")},
{str8_lit_comp("FPREM"), str8_lit_comp("Partial Remainder")},
{str8_lit_comp("FPREM1"), str8_lit_comp("Partial Remainder")},
{str8_lit_comp("FPTAN"), str8_lit_comp("Partial Tangent")},
{str8_lit_comp("FRNDINT"), str8_lit_comp("Round to Integer")},
{str8_lit_comp("FRSTOR"), str8_lit_comp("Restore x87 FPU State")},
{str8_lit_comp("FSAVE"), str8_lit_comp("Store x87 FPU State")},
{str8_lit_comp("FSCALE"), str8_lit_comp("Scale")},
{str8_lit_comp("FSIN"), str8_lit_comp("Sine")},
{str8_lit_comp("FSINCOS"), str8_lit_comp("Sine and Cosine")},
{str8_lit_comp("FSQRT"), str8_lit_comp("Square Root")},
{str8_lit_comp("FST"), str8_lit_comp("Store Floating Point Value")},
{str8_lit_comp("FSTCW"), str8_lit_comp("Store x87 FPU Control Word")},
{str8_lit_comp("FSTENV"), str8_lit_comp("Store x87 FPU Environment")},
{str8_lit_comp("FSTP"), str8_lit_comp("Store Floating Point Value")},
{str8_lit_comp("FSTSW"), str8_lit_comp("Store x87 FPU Status Word")},
{str8_lit_comp("FSUB"), str8_lit_comp("Subtract")},
{str8_lit_comp("FSUBP"), str8_lit_comp("Subtract")},
{str8_lit_comp("FSUBR"), str8_lit_comp("Reverse Subtract")},
{str8_lit_comp("FSUBRP"), str8_lit_comp("Reverse Subtract")},
{str8_lit_comp("FTST"), str8_lit_comp("TEST")},
{str8_lit_comp("FUCOM"), str8_lit_comp("Unordered Compare Floating Point Values")},
{str8_lit_comp("FUCOMI"), str8_lit_comp("Compare Floating Point Values and Set EFLAGS")},
{str8_lit_comp("FUCOMIP"), str8_lit_comp("Compare Floating Point Values and Set EFLAGS")},
{str8_lit_comp("FUCOMP"), str8_lit_comp("Unordered Compare Floating Point Values")},
{str8_lit_comp("FUCOMPP"), str8_lit_comp("Unordered Compare Floating Point Values")},
{str8_lit_comp("FWAIT"), str8_lit_comp("Wait")},
{str8_lit_comp("FXAM"), str8_lit_comp("Examine Floating-Point")},
{str8_lit_comp("FXCH"), str8_lit_comp("Exchange Register Contents")},
{str8_lit_comp("FXRSTOR"), str8_lit_comp("Restore x87 FPU, MMX, XMM, and MXCSR State")},
{str8_lit_comp("FXSAVE"), str8_lit_comp("Save x87 FPU, MMX Technology, and SSE State")},
{str8_lit_comp("FXTRACT"), str8_lit_comp("Extract Exponent and Significand")},
{str8_lit_comp("FYL2X"), str8_lit_comp("Compute y * log2x")},
{str8_lit_comp("FYL2XP1"), str8_lit_comp("Compute y * log2(x +1)")},
{str8_lit_comp("GF2P8AFFINEINVQB"), str8_lit_comp("Galois Field Affine Transformation Inverse")},
{str8_lit_comp("GF2P8AFFINEQB"), str8_lit_comp("Galois Field Affine Transformation")},
{str8_lit_comp("GF2P8MULB"), str8_lit_comp("Galois Field Multiply Bytes")},
{str8_lit_comp("HADDPD"), str8_lit_comp("Packed Double-FP Horizontal Add")},
{str8_lit_comp("HADDPS"), str8_lit_comp("Packed Single-FP Horizontal Add")},
{str8_lit_comp("HLT"), str8_lit_comp("Halt")},
{str8_lit_comp("HRESET"), str8_lit_comp("History Reset")},
{str8_lit_comp("HSUBPD"), str8_lit_comp("Packed Double-FP Horizontal Subtract")},
{str8_lit_comp("HSUBPS"), str8_lit_comp("Packed Single-FP Horizontal Subtract")},
{str8_lit_comp("IDIV"), str8_lit_comp("Signed Divide")},
{str8_lit_comp("IMUL"), str8_lit_comp("Signed Multiply")},
{str8_lit_comp("IN"), str8_lit_comp("Input from Port")},
{str8_lit_comp("INC"), str8_lit_comp("Increment by 1")},
{str8_lit_comp("INCSSPD"), str8_lit_comp("Increment Shadow Stack Pointer")},
{str8_lit_comp("INCSSPQ"), str8_lit_comp("Increment Shadow Stack Pointer")},
{str8_lit_comp("INS"), str8_lit_comp("Input from Port to String")},
{str8_lit_comp("INSB"), str8_lit_comp("Input from Port to String")},
{str8_lit_comp("INSD"), str8_lit_comp("Input from Port to String")},
{str8_lit_comp("INSERTPS"), str8_lit_comp("Insert Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("INSW"), str8_lit_comp("Input from Port to String")},
{str8_lit_comp("INT"), str8_lit_comp("Call to Interrupt Procedure")},
{str8_lit_comp("INT1"), str8_lit_comp("Call to Interrupt Procedure")},
{str8_lit_comp("INT3"), str8_lit_comp("Call to Interrupt Procedure")},
{str8_lit_comp("INTO"), str8_lit_comp("Call to Interrupt Procedure")},
{str8_lit_comp("INVD"), str8_lit_comp("Invalidate Internal Caches")},
{str8_lit_comp("INVLPG"), str8_lit_comp("Invalidate TLB Entries")},
{str8_lit_comp("INVPCID"), str8_lit_comp("Invalidate Process-Context Identifier")},
{str8_lit_comp("IRET"), str8_lit_comp("Interrupt Return")},
{str8_lit_comp("IRETD"), str8_lit_comp("Interrupt Return")},
{str8_lit_comp("IRETQ"), str8_lit_comp("Interrupt Return")},
{str8_lit_comp("JMP"), str8_lit_comp("Jump")},
{str8_lit_comp("Jcc"), str8_lit_comp("Jump if Condition Is Met")},
{str8_lit_comp("KADDB"), str8_lit_comp("ADD Two Masks")},
{str8_lit_comp("KADDD"), str8_lit_comp("ADD Two Masks")},
{str8_lit_comp("KADDQ"), str8_lit_comp("ADD Two Masks")},
{str8_lit_comp("KADDW"), str8_lit_comp("ADD Two Masks")},
{str8_lit_comp("KANDB"), str8_lit_comp("Bitwise Logical AND Masks")},
{str8_lit_comp("KANDD"), str8_lit_comp("Bitwise Logical AND Masks")},
{str8_lit_comp("KANDNB"), str8_lit_comp("Bitwise Logical AND NOT Masks")},
{str8_lit_comp("KANDND"), str8_lit_comp("Bitwise Logical AND NOT Masks")},
{str8_lit_comp("KANDNQ"), str8_lit_comp("Bitwise Logical AND NOT Masks")},
{str8_lit_comp("KANDNW"), str8_lit_comp("Bitwise Logical AND NOT Masks")},
{str8_lit_comp("KANDQ"), str8_lit_comp("Bitwise Logical AND Masks")},
{str8_lit_comp("KANDW"), str8_lit_comp("Bitwise Logical AND Masks")},
{str8_lit_comp("KMOVB"), str8_lit_comp("Move from and to Mask Registers")},
{str8_lit_comp("KMOVD"), str8_lit_comp("Move from and to Mask Registers")},
{str8_lit_comp("KMOVQ"), str8_lit_comp("Move from and to Mask Registers")},
{str8_lit_comp("KMOVW"), str8_lit_comp("Move from and to Mask Registers")},
{str8_lit_comp("KNOTB"), str8_lit_comp("NOT Mask Register")},
{str8_lit_comp("KNOTD"), str8_lit_comp("NOT Mask Register")},
{str8_lit_comp("KNOTQ"), str8_lit_comp("NOT Mask Register")},
{str8_lit_comp("KNOTW"), str8_lit_comp("NOT Mask Register")},
{str8_lit_comp("KORB"), str8_lit_comp("Bitwise Logical OR Masks")},
{str8_lit_comp("KORD"), str8_lit_comp("Bitwise Logical OR Masks")},
{str8_lit_comp("KORQ"), str8_lit_comp("Bitwise Logical OR Masks")},
{str8_lit_comp("KORTESTB"), str8_lit_comp("OR Masks And Set Flags")},
{str8_lit_comp("KORTESTD"), str8_lit_comp("OR Masks And Set Flags")},
{str8_lit_comp("KORTESTQ"), str8_lit_comp("OR Masks And Set Flags")},
{str8_lit_comp("KORTESTW"), str8_lit_comp("OR Masks And Set Flags")},
{str8_lit_comp("KORW"), str8_lit_comp("Bitwise Logical OR Masks")},
{str8_lit_comp("KSHIFTLB"), str8_lit_comp("Shift Left Mask Registers")},
{str8_lit_comp("KSHIFTLD"), str8_lit_comp("Shift Left Mask Registers")},
{str8_lit_comp("KSHIFTLQ"), str8_lit_comp("Shift Left Mask Registers")},
{str8_lit_comp("KSHIFTLW"), str8_lit_comp("Shift Left Mask Registers")},
{str8_lit_comp("KSHIFTRB"), str8_lit_comp("Shift Right Mask Registers")},
{str8_lit_comp("KSHIFTRD"), str8_lit_comp("Shift Right Mask Registers")},
{str8_lit_comp("KSHIFTRQ"), str8_lit_comp("Shift Right Mask Registers")},
{str8_lit_comp("KSHIFTRW"), str8_lit_comp("Shift Right Mask Registers")},
{str8_lit_comp("KTESTB"), str8_lit_comp("Packed Bit Test Masks and Set Flags")},
{str8_lit_comp("KTESTD"), str8_lit_comp("Packed Bit Test Masks and Set Flags")},
{str8_lit_comp("KTESTQ"), str8_lit_comp("Packed Bit Test Masks and Set Flags")},
{str8_lit_comp("KTESTW"), str8_lit_comp("Packed Bit Test Masks and Set Flags")},
{str8_lit_comp("KUNPCKBW"), str8_lit_comp("Unpack for Mask Registers")},
{str8_lit_comp("KUNPCKDQ"), str8_lit_comp("Unpack for Mask Registers")},
{str8_lit_comp("KUNPCKWD"), str8_lit_comp("Unpack for Mask Registers")},
{str8_lit_comp("KXNORB"), str8_lit_comp("Bitwise Logical XNOR Masks")},
{str8_lit_comp("KXNORD"), str8_lit_comp("Bitwise Logical XNOR Masks")},
{str8_lit_comp("KXNORQ"), str8_lit_comp("Bitwise Logical XNOR Masks")},
{str8_lit_comp("KXNORW"), str8_lit_comp("Bitwise Logical XNOR Masks")},
{str8_lit_comp("KXORB"), str8_lit_comp("Bitwise Logical XOR Masks")},
{str8_lit_comp("KXORD"), str8_lit_comp("Bitwise Logical XOR Masks")},
{str8_lit_comp("KXORQ"), str8_lit_comp("Bitwise Logical XOR Masks")},
{str8_lit_comp("KXORW"), str8_lit_comp("Bitwise Logical XOR Masks")},
{str8_lit_comp("LAHF"), str8_lit_comp("Load Status Flags into AH Register")},
{str8_lit_comp("LAR"), str8_lit_comp("Load Access Rights Byte")},
{str8_lit_comp("LDDQU"), str8_lit_comp("Load Unaligned Integer 128 Bits")},
{str8_lit_comp("LDMXCSR"), str8_lit_comp("Load MXCSR Register")},
{str8_lit_comp("LDS"), str8_lit_comp("Load Far Pointer")},
{str8_lit_comp("LEA"), str8_lit_comp("Load Effective Address")},
{str8_lit_comp("LEAVE"), str8_lit_comp("High Level Procedure Exit")},
{str8_lit_comp("LES"), str8_lit_comp("Load Far Pointer")},
{str8_lit_comp("LFENCE"), str8_lit_comp("Load Fence")},
{str8_lit_comp("LFS"), str8_lit_comp("Load Far Pointer")},
{str8_lit_comp("LGDT"), str8_lit_comp("Load Global/Interrupt Descriptor Table Register")},
{str8_lit_comp("LGS"), str8_lit_comp("Load Far Pointer")},
{str8_lit_comp("LIDT"), str8_lit_comp("Load Global/Interrupt Descriptor Table Register")},
{str8_lit_comp("LLDT"), str8_lit_comp("Load Local Descriptor Table Register")},
{str8_lit_comp("LMSW"), str8_lit_comp("Load Machine Status Word")},
{str8_lit_comp("LOADIWKEY"), str8_lit_comp("Load Internal Wrapping Key with Key Locker")},
{str8_lit_comp("LOCK"), str8_lit_comp("Assert LOCK# Signal Prefix")},
{str8_lit_comp("LODS"), str8_lit_comp("Load String")},
{str8_lit_comp("LODSB"), str8_lit_comp("Load String")},
{str8_lit_comp("LODSD"), str8_lit_comp("Load String")},
{str8_lit_comp("LODSQ"), str8_lit_comp("Load String")},
{str8_lit_comp("LODSW"), str8_lit_comp("Load String")},
{str8_lit_comp("LOOP"), str8_lit_comp("Loop According to ECX Counter")},
{str8_lit_comp("LOOPcc"), str8_lit_comp("Loop According to ECX Counter")},
{str8_lit_comp("LSL"), str8_lit_comp("Load Segment Limit")},
{str8_lit_comp("LSS"), str8_lit_comp("Load Far Pointer")},
{str8_lit_comp("LTR"), str8_lit_comp("Load Task Register")},
{str8_lit_comp("LZCNT"), str8_lit_comp("Count the Number of Leading Zero Bits")},
{str8_lit_comp("MASKMOVDQU"), str8_lit_comp("Store Selected Bytes of Double Quadword")},
{str8_lit_comp("MASKMOVQ"), str8_lit_comp("Store Selected Bytes of Quadword")},
{str8_lit_comp("MAXPD"), str8_lit_comp("Maximum of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("MAXPS"), str8_lit_comp("Maximum of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MAXSD"), str8_lit_comp("Return Maximum Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("MAXSS"), str8_lit_comp("Return Maximum Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("MFENCE"), str8_lit_comp("Memory Fence")},
{str8_lit_comp("MINPD"), str8_lit_comp("Minimum of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("MINPS"), str8_lit_comp("Minimum of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MINSD"), str8_lit_comp("Return Minimum Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("MINSS"), str8_lit_comp("Return Minimum Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("MONITOR"), str8_lit_comp("Set Up Monitor Address")},
{str8_lit_comp("MOV"), str8_lit_comp("Move")},
{str8_lit_comp("MOVAPD"), str8_lit_comp("Move Aligned Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("MOVAPS"), str8_lit_comp("Move Aligned Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MOVBE"), str8_lit_comp("Move Data After Swapping Bytes")},
{str8_lit_comp("MOVD"), str8_lit_comp("Move Doubleword/Move Quadword")},
{str8_lit_comp("MOVDDUP"), str8_lit_comp("Replicate Double FP Values")},
{str8_lit_comp("MOVDIR64B"), str8_lit_comp("Move 64 Bytes as Direct Store")},
{str8_lit_comp("MOVDIRI"), str8_lit_comp("Move Doubleword as Direct Store")},
{str8_lit_comp("MOVDQ2Q"), str8_lit_comp("Move Quadword from XMM to MMX Technology Register")},
{str8_lit_comp("MOVDQA"), str8_lit_comp("Move Aligned Packed Integer Values")},
{str8_lit_comp("MOVDQU"), str8_lit_comp("Move Unaligned Packed Integer Values")},
{str8_lit_comp("MOVHLPS"), str8_lit_comp("Move Packed Single-Precision Floating-Point Values High to Low")},
{str8_lit_comp("MOVHPD"), str8_lit_comp("Move High Packed Double-Precision Floating-Point Value")},
{str8_lit_comp("MOVHPS"), str8_lit_comp("Move High Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MOVLHPS"), str8_lit_comp("Move Packed Single-Precision Floating-Point Values Low to High")},
{str8_lit_comp("MOVLPD"), str8_lit_comp("Move Low Packed Double-Precision Floating-Point Value")},
{str8_lit_comp("MOVLPS"), str8_lit_comp("Move Low Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MOVMSKPD"), str8_lit_comp("Extract Packed Double-Precision Floating-Point Sign Mask")},
{str8_lit_comp("MOVMSKPS"), str8_lit_comp("Extract Packed Single-Precision Floating-Point Sign Mask")},
{str8_lit_comp("MOVNTDQ"), str8_lit_comp("Store Packed Integers Using Non-Temporal Hint")},
{str8_lit_comp("MOVNTDQA"), str8_lit_comp("Load Double Quadword Non-Temporal Aligned Hint")},
{str8_lit_comp("MOVNTI"), str8_lit_comp("Store Doubleword Using Non-Temporal Hint")},
{str8_lit_comp("MOVNTPD"), str8_lit_comp("Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint")},
{str8_lit_comp("MOVNTPS"), str8_lit_comp("Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint")},
{str8_lit_comp("MOVNTQ"), str8_lit_comp("Store of Quadword Using Non-Temporal Hint")},
{str8_lit_comp("MOVQ"), str8_lit_comp("Move Doubleword/Move Quadword")},
{str8_lit_comp("MOVQ2DQ"), str8_lit_comp("Move Quadword from MMX Technology to XMM Register")},
{str8_lit_comp("MOVS"), str8_lit_comp("Move Data from String to String")},
{str8_lit_comp("MOVSB"), str8_lit_comp("Move Data from String to String")},
{str8_lit_comp("MOVSD"), str8_lit_comp("Move Data from String to String")},
{str8_lit_comp("MOVSHDUP"), str8_lit_comp("Replicate Single FP Values")},
{str8_lit_comp("MOVSLDUP"), str8_lit_comp("Replicate Single FP Values")},
{str8_lit_comp("MOVSQ"), str8_lit_comp("Move Data from String to String")},
{str8_lit_comp("MOVSS"), str8_lit_comp("Move or Merge Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("MOVSW"), str8_lit_comp("Move Data from String to String")},
{str8_lit_comp("MOVSX"), str8_lit_comp("Move with Sign-Extension")},
{str8_lit_comp("MOVSXD"), str8_lit_comp("Move with Sign-Extension")},
{str8_lit_comp("MOVUPD"), str8_lit_comp("Move Unaligned Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("MOVUPS"), str8_lit_comp("Move Unaligned Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MOVZX"), str8_lit_comp("Move with Zero-Extend")},
{str8_lit_comp("MPSADBW"), str8_lit_comp("Compute Multiple Packed Sums of Absolute Difference")},
{str8_lit_comp("MUL"), str8_lit_comp("Unsigned Multiply")},
{str8_lit_comp("MULPD"), str8_lit_comp("Multiply Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("MULPS"), str8_lit_comp("Multiply Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("MULSD"), str8_lit_comp("Multiply Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("MULSS"), str8_lit_comp("Multiply Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("MULX"), str8_lit_comp("Unsigned Multiply Without Affecting Flags")},
{str8_lit_comp("MWAIT"), str8_lit_comp("Monitor Wait")},
{str8_lit_comp("NEG"), str8_lit_comp("Two's Complement Negation")},
{str8_lit_comp("NOP"), str8_lit_comp("No Operation")},
{str8_lit_comp("NOT"), str8_lit_comp("One's Complement Negation")},
{str8_lit_comp("OR"), str8_lit_comp("Logical Inclusive OR")},
{str8_lit_comp("ORPD"), str8_lit_comp("Bitwise Logical OR of Packed Double Precision Floating-Point Values")},
{str8_lit_comp("ORPS"), str8_lit_comp("Bitwise Logical OR of Packed Single Precision Floating-Point Values")},
{str8_lit_comp("OUT"), str8_lit_comp("Output to Port")},
{str8_lit_comp("OUTS"), str8_lit_comp("Output String to Port")},
{str8_lit_comp("OUTSB"), str8_lit_comp("Output String to Port")},
{str8_lit_comp("OUTSD"), str8_lit_comp("Output String to Port")},
{str8_lit_comp("OUTSW"), str8_lit_comp("Output String to Port")},
{str8_lit_comp("PABSB"), str8_lit_comp("Packed Absolute Value")},
{str8_lit_comp("PABSD"), str8_lit_comp("Packed Absolute Value")},
{str8_lit_comp("PABSQ"), str8_lit_comp("Packed Absolute Value")},
{str8_lit_comp("PABSW"), str8_lit_comp("Packed Absolute Value")},
{str8_lit_comp("PACKSSDW"), str8_lit_comp("Pack with Signed Saturation")},
{str8_lit_comp("PACKSSWB"), str8_lit_comp("Pack with Signed Saturation")},
{str8_lit_comp("PACKUSDW"), str8_lit_comp("Pack with Unsigned Saturation")},
{str8_lit_comp("PACKUSWB"), str8_lit_comp("Pack with Unsigned Saturation")},
{str8_lit_comp("PADDB"), str8_lit_comp("Add Packed Integers")},
{str8_lit_comp("PADDD"), str8_lit_comp("Add Packed Integers")},
{str8_lit_comp("PADDQ"), str8_lit_comp("Add Packed Integers")},
{str8_lit_comp("PADDSB"), str8_lit_comp("Add Packed Signed Integers with Signed Saturation")},
{str8_lit_comp("PADDSW"), str8_lit_comp("Add Packed Signed Integers with Signed Saturation")},
{str8_lit_comp("PADDUSB"), str8_lit_comp("Add Packed Unsigned Integers with Unsigned Saturation")},
{str8_lit_comp("PADDUSW"), str8_lit_comp("Add Packed Unsigned Integers with Unsigned Saturation")},
{str8_lit_comp("PADDW"), str8_lit_comp("Add Packed Integers")},
{str8_lit_comp("PALIGNR"), str8_lit_comp("Packed Align Right")},
{str8_lit_comp("PAND"), str8_lit_comp("Logical AND")},
{str8_lit_comp("PANDN"), str8_lit_comp("Logical AND NOT")},
{str8_lit_comp("PAUSE"), str8_lit_comp("Spin Loop Hint")},
{str8_lit_comp("PAVGB"), str8_lit_comp("Average Packed Integers")},
{str8_lit_comp("PAVGW"), str8_lit_comp("Average Packed Integers")},
{str8_lit_comp("PBLENDVB"), str8_lit_comp("Variable Blend Packed Bytes")},
{str8_lit_comp("PBLENDW"), str8_lit_comp("Blend Packed Words")},
{str8_lit_comp("PCLMULQDQ"), str8_lit_comp("Carry-Less Multiplication Quadword")},
{str8_lit_comp("PCMPEQB"), str8_lit_comp("Compare Packed Data for Equal")},
{str8_lit_comp("PCMPEQD"), str8_lit_comp("Compare Packed Data for Equal")},
{str8_lit_comp("PCMPEQQ"), str8_lit_comp("Compare Packed Qword Data for Equal")},
{str8_lit_comp("PCMPEQW"), str8_lit_comp("Compare Packed Data for Equal")},
{str8_lit_comp("PCMPESTRI"), str8_lit_comp("Packed Compare Explicit Length Strings, Return Index")},
{str8_lit_comp("PCMPESTRM"), str8_lit_comp("Packed Compare Explicit Length Strings, Return Mask")},
{str8_lit_comp("PCMPGTB"), str8_lit_comp("Compare Packed Signed Integers for Greater Than")},
{str8_lit_comp("PCMPGTD"), str8_lit_comp("Compare Packed Signed Integers for Greater Than")},
{str8_lit_comp("PCMPGTQ"), str8_lit_comp("Compare Packed Data for Greater Than")},
{str8_lit_comp("PCMPGTW"), str8_lit_comp("Compare Packed Signed Integers for Greater Than")},
{str8_lit_comp("PCMPISTRI"), str8_lit_comp("Packed Compare Implicit Length Strings, Return Index")},
{str8_lit_comp("PCMPISTRM"), str8_lit_comp("Packed Compare Implicit Length Strings, Return Mask")},
{str8_lit_comp("PCONFIG"), str8_lit_comp("Platform Configuration")},
{str8_lit_comp("PDEP"), str8_lit_comp("Parallel Bits Deposit")},
{str8_lit_comp("PEXT"), str8_lit_comp("Parallel Bits Extract")},
{str8_lit_comp("PEXTRB"), str8_lit_comp("Extract Byte/Dword/Qword")},
{str8_lit_comp("PEXTRD"), str8_lit_comp("Extract Byte/Dword/Qword")},
{str8_lit_comp("PEXTRQ"), str8_lit_comp("Extract Byte/Dword/Qword")},
{str8_lit_comp("PEXTRW"), str8_lit_comp("Extract Word")},
{str8_lit_comp("PHADDD"), str8_lit_comp("Packed Horizontal Add")},
{str8_lit_comp("PHADDSW"), str8_lit_comp("Packed Horizontal Add and Saturate")},
{str8_lit_comp("PHADDW"), str8_lit_comp("Packed Horizontal Add")},
{str8_lit_comp("PHMINPOSUW"), str8_lit_comp("Packed Horizontal Word Minimum")},
{str8_lit_comp("PHSUBD"), str8_lit_comp("Packed Horizontal Subtract")},
{str8_lit_comp("PHSUBSW"), str8_lit_comp("Packed Horizontal Subtract and Saturate")},
{str8_lit_comp("PHSUBW"), str8_lit_comp("Packed Horizontal Subtract")},
{str8_lit_comp("PINSRB"), str8_lit_comp("Insert Byte/Dword/Qword")},
{str8_lit_comp("PINSRD"), str8_lit_comp("Insert Byte/Dword/Qword")},
{str8_lit_comp("PINSRQ"), str8_lit_comp("Insert Byte/Dword/Qword")},
{str8_lit_comp("PINSRW"), str8_lit_comp("Insert Word")},
{str8_lit_comp("PMADDUBSW"), str8_lit_comp("Multiply and Add Packed Signed and Unsigned Bytes")},
{str8_lit_comp("PMADDWD"), str8_lit_comp("Multiply and Add Packed Integers")},
{str8_lit_comp("PMAXSB"), str8_lit_comp("Maximum of Packed Signed Integers")},
{str8_lit_comp("PMAXSD"), str8_lit_comp("Maximum of Packed Signed Integers")},
{str8_lit_comp("PMAXSQ"), str8_lit_comp("Maximum of Packed Signed Integers")},
{str8_lit_comp("PMAXSW"), str8_lit_comp("Maximum of Packed Signed Integers")},
{str8_lit_comp("PMAXUB"), str8_lit_comp("Maximum of Packed Unsigned Integers")},
{str8_lit_comp("PMAXUD"), str8_lit_comp("Maximum of Packed Unsigned Integers")},
{str8_lit_comp("PMAXUQ"), str8_lit_comp("Maximum of Packed Unsigned Integers")},
{str8_lit_comp("PMAXUW"), str8_lit_comp("Maximum of Packed Unsigned Integers")},
{str8_lit_comp("PMINSB"), str8_lit_comp("Minimum of Packed Signed Integers")},
{str8_lit_comp("PMINSD"), str8_lit_comp("Minimum of Packed Signed Integers")},
{str8_lit_comp("PMINSQ"), str8_lit_comp("Minimum of Packed Signed Integers")},
{str8_lit_comp("PMINSW"), str8_lit_comp("Minimum of Packed Signed Integers")},
{str8_lit_comp("PMINUB"), str8_lit_comp("Minimum of Packed Unsigned Integers")},
{str8_lit_comp("PMINUD"), str8_lit_comp("Minimum of Packed Unsigned Integers")},
{str8_lit_comp("PMINUQ"), str8_lit_comp("Minimum of Packed Unsigned Integers")},
{str8_lit_comp("PMINUW"), str8_lit_comp("Minimum of Packed Unsigned Integers")},
{str8_lit_comp("PMOVMSKB"), str8_lit_comp("Move Byte Mask")},
{str8_lit_comp("PMOVSX"), str8_lit_comp("Packed Move with Sign Extend")},
{str8_lit_comp("PMOVZX"), str8_lit_comp("Packed Move with Zero Extend")},
{str8_lit_comp("PMULDQ"), str8_lit_comp("Multiply Packed Doubleword Integers")},
{str8_lit_comp("PMULHRSW"), str8_lit_comp("Packed Multiply High with Round and Scale")},
{str8_lit_comp("PMULHUW"), str8_lit_comp("Multiply Packed Unsigned Integers and Store High Result")},
{str8_lit_comp("PMULHW"), str8_lit_comp("Multiply Packed Signed Integers and Store High Result")},
{str8_lit_comp("PMULLD"), str8_lit_comp("Multiply Packed Integers and Store Low Result")},
{str8_lit_comp("PMULLQ"), str8_lit_comp("Multiply Packed Integers and Store Low Result")},
{str8_lit_comp("PMULLW"), str8_lit_comp("Multiply Packed Signed Integers and Store Low Result")},
{str8_lit_comp("PMULUDQ"), str8_lit_comp("Multiply Packed Unsigned Doubleword Integers")},
{str8_lit_comp("POP"), str8_lit_comp("Pop a Value from the Stack")},
{str8_lit_comp("POPA"), str8_lit_comp("Pop All General-Purpose Registers")},
{str8_lit_comp("POPAD"), str8_lit_comp("Pop All General-Purpose Registers")},
{str8_lit_comp("POPCNT"), str8_lit_comp("Return the Count of Number of Bits Set to 1")},
{str8_lit_comp("POPF"), str8_lit_comp("Pop Stack into EFLAGS Register")},
{str8_lit_comp("POPFD"), str8_lit_comp("Pop Stack into EFLAGS Register")},
{str8_lit_comp("POPFQ"), str8_lit_comp("Pop Stack into EFLAGS Register")},
{str8_lit_comp("POR"), str8_lit_comp("Bitwise Logical OR")},
{str8_lit_comp("PREFETCHW"), str8_lit_comp("Prefetch Data into Caches in Anticipation of a Write")},
{str8_lit_comp("PREFETCHh"), str8_lit_comp("Prefetch Data Into Caches")},
{str8_lit_comp("PSADBW"), str8_lit_comp("Compute Sum of Absolute Differences")},
{str8_lit_comp("PSHUFB"), str8_lit_comp("Packed Shuffle Bytes")},
{str8_lit_comp("PSHUFD"), str8_lit_comp("Shuffle Packed Doublewords")},
{str8_lit_comp("PSHUFHW"), str8_lit_comp("Shuffle Packed High Words")},
{str8_lit_comp("PSHUFLW"), str8_lit_comp("Shuffle Packed Low Words")},
{str8_lit_comp("PSHUFW"), str8_lit_comp("Shuffle Packed Words")},
{str8_lit_comp("PSIGNB"), str8_lit_comp("Packed SIGN")},
{str8_lit_comp("PSIGND"), str8_lit_comp("Packed SIGN")},
{str8_lit_comp("PSIGNW"), str8_lit_comp("Packed SIGN")},
{str8_lit_comp("PSLLD"), str8_lit_comp("Shift Packed Data Left Logical")},
{str8_lit_comp("PSLLDQ"), str8_lit_comp("Shift Double Quadword Left Logical")},
{str8_lit_comp("PSLLQ"), str8_lit_comp("Shift Packed Data Left Logical")},
{str8_lit_comp("PSLLW"), str8_lit_comp("Shift Packed Data Left Logical")},
{str8_lit_comp("PSRAD"), str8_lit_comp("Shift Packed Data Right Arithmetic")},
{str8_lit_comp("PSRAQ"), str8_lit_comp("Shift Packed Data Right Arithmetic")},
{str8_lit_comp("PSRAW"), str8_lit_comp("Shift Packed Data Right Arithmetic")},
{str8_lit_comp("PSRLD"), str8_lit_comp("Shift Packed Data Right Logical")},
{str8_lit_comp("PSRLDQ"), str8_lit_comp("Shift Double Quadword Right Logical")},
{str8_lit_comp("PSRLQ"), str8_lit_comp("Shift Packed Data Right Logical")},
{str8_lit_comp("PSRLW"), str8_lit_comp("Shift Packed Data Right Logical")},
{str8_lit_comp("PSUBB"), str8_lit_comp("Subtract Packed Integers")},
{str8_lit_comp("PSUBD"), str8_lit_comp("Subtract Packed Integers")},
{str8_lit_comp("PSUBQ"), str8_lit_comp("Subtract Packed Quadword Integers")},
{str8_lit_comp("PSUBSB"), str8_lit_comp("Subtract Packed Signed Integers with Signed Saturation")},
{str8_lit_comp("PSUBSW"), str8_lit_comp("Subtract Packed Signed Integers with Signed Saturation")},
{str8_lit_comp("PSUBUSB"), str8_lit_comp("Subtract Packed Unsigned Integers with Unsigned Saturation")},
{str8_lit_comp("PSUBUSW"), str8_lit_comp("Subtract Packed Unsigned Integers with Unsigned Saturation")},
{str8_lit_comp("PSUBW"), str8_lit_comp("Subtract Packed Integers")},
{str8_lit_comp("PTEST"), str8_lit_comp("Logical Compare")},
{str8_lit_comp("PTWRITE"), str8_lit_comp("Write Data to a Processor Trace Packet")},
{str8_lit_comp("PUNPCKHBW"), str8_lit_comp("Unpack High Data")},
{str8_lit_comp("PUNPCKHDQ"), str8_lit_comp("Unpack High Data")},
{str8_lit_comp("PUNPCKHQDQ"), str8_lit_comp("Unpack High Data")},
{str8_lit_comp("PUNPCKHWD"), str8_lit_comp("Unpack High Data")},
{str8_lit_comp("PUNPCKLBW"), str8_lit_comp("Unpack Low Data")},
{str8_lit_comp("PUNPCKLDQ"), str8_lit_comp("Unpack Low Data")},
{str8_lit_comp("PUNPCKLQDQ"), str8_lit_comp("Unpack Low Data")},
{str8_lit_comp("PUNPCKLWD"), str8_lit_comp("Unpack Low Data")},
{str8_lit_comp("PUSH"), str8_lit_comp("Push Word, Doubleword or Quadword Onto the Stack")},
{str8_lit_comp("PUSHA"), str8_lit_comp("Push All General-Purpose Registers")},
{str8_lit_comp("PUSHAD"), str8_lit_comp("Push All General-Purpose Registers")},
{str8_lit_comp("PUSHF"), str8_lit_comp("Push EFLAGS Register onto the Stack")},
{str8_lit_comp("PUSHFD"), str8_lit_comp("Push EFLAGS Register onto the Stack")},
{str8_lit_comp("PUSHFQ"), str8_lit_comp("Push EFLAGS Register onto the Stack")},
{str8_lit_comp("PXOR"), str8_lit_comp("Logical Exclusive OR")},
{str8_lit_comp("RCL"), str8_lit_comp("Rotate")},
{str8_lit_comp("RCPPS"), str8_lit_comp("Compute Reciprocals of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("RCPSS"), str8_lit_comp("Compute Reciprocal of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("RCR"), str8_lit_comp("Rotate")},
{str8_lit_comp("RDFSBASE"), str8_lit_comp("Read FS/GS Segment Base")},
{str8_lit_comp("RDGSBASE"), str8_lit_comp("Read FS/GS Segment Base")},
{str8_lit_comp("RDMSR"), str8_lit_comp("Read from Model Specific Register")},
{str8_lit_comp("RDPID"), str8_lit_comp("Read Processor ID")},
{str8_lit_comp("RDPKRU"), str8_lit_comp("Read Protection Key Rights for User Pages")},
{str8_lit_comp("RDPMC"), str8_lit_comp("Read Performance-Monitoring Counters")},
{str8_lit_comp("RDRAND"), str8_lit_comp("Read Random Number")},
{str8_lit_comp("RDSEED"), str8_lit_comp("Read Random SEED")},
{str8_lit_comp("RDSSPD"), str8_lit_comp("Read Shadow Stack Pointer")},
{str8_lit_comp("RDSSPQ"), str8_lit_comp("Read Shadow Stack Pointer")},
{str8_lit_comp("RDTSC"), str8_lit_comp("Read Time-Stamp Counter")},
{str8_lit_comp("RDTSCP"), str8_lit_comp("Read Time-Stamp Counter and Processor ID")},
{str8_lit_comp("REP"), str8_lit_comp("Repeat String Operation Prefix")},
{str8_lit_comp("REPE"), str8_lit_comp("Repeat String Operation Prefix")},
{str8_lit_comp("REPNE"), str8_lit_comp("Repeat String Operation Prefix")},
{str8_lit_comp("REPNZ"), str8_lit_comp("Repeat String Operation Prefix")},
{str8_lit_comp("REPZ"), str8_lit_comp("Repeat String Operation Prefix")},
{str8_lit_comp("RET"), str8_lit_comp("Return from Procedure")},
{str8_lit_comp("ROL"), str8_lit_comp("Rotate")},
{str8_lit_comp("ROR"), str8_lit_comp("Rotate")},
{str8_lit_comp("RORX"), str8_lit_comp("Rotate Right Logical Without Affecting Flags")},
{str8_lit_comp("ROUNDPD"), str8_lit_comp("Round Packed Double Precision Floating-Point Values")},
{str8_lit_comp("ROUNDPS"), str8_lit_comp("Round Packed Single Precision Floating-Point Values")},
{str8_lit_comp("ROUNDSD"), str8_lit_comp("Round Scalar Double Precision Floating-Point Values")},
{str8_lit_comp("ROUNDSS"), str8_lit_comp("Round Scalar Single Precision Floating-Point Values")},
{str8_lit_comp("RSM"), str8_lit_comp("Resume from System Management Mode")},
{str8_lit_comp("RSQRTPS"), str8_lit_comp("Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("RSQRTSS"), str8_lit_comp("Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("RSTORSSP"), str8_lit_comp("Restore Saved Shadow Stack Pointer")},
{str8_lit_comp("SAHF"), str8_lit_comp("Store AH into Flags")},
{str8_lit_comp("SAL"), str8_lit_comp("Shift")},
{str8_lit_comp("SAR"), str8_lit_comp("Shift")},
{str8_lit_comp("SARX"), str8_lit_comp("Shift Without Affecting Flags")},
{str8_lit_comp("SAVEPREVSSP"), str8_lit_comp("Save Previous Shadow Stack Pointer")},
{str8_lit_comp("SBB"), str8_lit_comp("Integer Subtraction with Borrow")},
{str8_lit_comp("SCAS"), str8_lit_comp("Scan String")},
{str8_lit_comp("SCASB"), str8_lit_comp("Scan String")},
{str8_lit_comp("SCASD"), str8_lit_comp("Scan String")},
{str8_lit_comp("SCASW"), str8_lit_comp("Scan String")},
{str8_lit_comp("SERIALIZE"), str8_lit_comp("Serialize Instruction Execution")},
{str8_lit_comp("SETSSBSY"), str8_lit_comp("Mark Shadow Stack Busy")},
{str8_lit_comp("SETcc"), str8_lit_comp("Set Byte on Condition")},
{str8_lit_comp("SFENCE"), str8_lit_comp("Store Fence")},
{str8_lit_comp("SGDT"), str8_lit_comp("Store Global Descriptor Table Register")},
{str8_lit_comp("SHA1MSG1"), str8_lit_comp("Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords")},
{str8_lit_comp("SHA1MSG2"), str8_lit_comp("Perform a Final Calculation for the Next Four SHA1 Message Dwords")},
{str8_lit_comp("SHA1NEXTE"), str8_lit_comp("Calculate SHA1 State Variable E after Four Rounds")},
{str8_lit_comp("SHA1RNDS4"), str8_lit_comp("Perform Four Rounds of SHA1 Operation")},
{str8_lit_comp("SHA256MSG1"), str8_lit_comp("Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords")},
{str8_lit_comp("SHA256MSG2"), str8_lit_comp("Perform a Final Calculation for the Next Four SHA256 Message Dwords")},
{str8_lit_comp("SHA256RNDS2"), str8_lit_comp("Perform Two Rounds of SHA256 Operation")},
{str8_lit_comp("SHL"), str8_lit_comp("Shift")},
{str8_lit_comp("SHLD"), str8_lit_comp("Double Precision Shift Left")},
{str8_lit_comp("SHLX"), str8_lit_comp("Shift Without Affecting Flags")},
{str8_lit_comp("SHR"), str8_lit_comp("Shift")},
{str8_lit_comp("SHRD"), str8_lit_comp("Double Precision Shift Right")},
{str8_lit_comp("SHRX"), str8_lit_comp("Shift Without Affecting Flags")},
{str8_lit_comp("SHUFPD"), str8_lit_comp("Packed Interleave Shuffle of Pairs of Double-Precision Floating-Point Values")},
{str8_lit_comp("SHUFPS"), str8_lit_comp("Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values")},
{str8_lit_comp("SIDT"), str8_lit_comp("Store Interrupt Descriptor Table Register")},
{str8_lit_comp("SLDT"), str8_lit_comp("Store Local Descriptor Table Register")},
{str8_lit_comp("SMSW"), str8_lit_comp("Store Machine Status Word")},
{str8_lit_comp("SQRTPD"), str8_lit_comp("Square Root of Double-Precision Floating-Point Values")},
{str8_lit_comp("SQRTPS"), str8_lit_comp("Square Root of Single-Precision Floating-Point Values")},
{str8_lit_comp("SQRTSD"), str8_lit_comp("Compute Square Root of Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("SQRTSS"), str8_lit_comp("Compute Square Root of Scalar Single-Precision Value")},
{str8_lit_comp("STAC"), str8_lit_comp("Set AC Flag in EFLAGS Register")},
{str8_lit_comp("STC"), str8_lit_comp("Set Carry Flag")},
{str8_lit_comp("STD"), str8_lit_comp("Set Direction Flag")},
{str8_lit_comp("STI"), str8_lit_comp("Set Interrupt Flag")},
{str8_lit_comp("STMXCSR"), str8_lit_comp("Store MXCSR Register State")},
{str8_lit_comp("STOS"), str8_lit_comp("Store String")},
{str8_lit_comp("STOSB"), str8_lit_comp("Store String")},
{str8_lit_comp("STOSD"), str8_lit_comp("Store String")},
{str8_lit_comp("STOSQ"), str8_lit_comp("Store String")},
{str8_lit_comp("STOSW"), str8_lit_comp("Store String")},
{str8_lit_comp("STR"), str8_lit_comp("Store Task Register")},
{str8_lit_comp("SUB"), str8_lit_comp("Subtract")},
{str8_lit_comp("SUBPD"), str8_lit_comp("Subtract Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("SUBPS"), str8_lit_comp("Subtract Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("SUBSD"), str8_lit_comp("Subtract Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("SUBSS"), str8_lit_comp("Subtract Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("SWAPGS"), str8_lit_comp("Swap GS Base Register")},
{str8_lit_comp("SYSCALL"), str8_lit_comp("Fast System Call")},
{str8_lit_comp("SYSENTER"), str8_lit_comp("Fast System Call")},
{str8_lit_comp("SYSEXIT"), str8_lit_comp("Fast Return from Fast System Call")},
{str8_lit_comp("SYSRET"), str8_lit_comp("Return From Fast System Call")},
{str8_lit_comp("TEST"), str8_lit_comp("Logical Compare")},
{str8_lit_comp("TPAUSE"), str8_lit_comp("Timed PAUSE")},
{str8_lit_comp("TZCNT"), str8_lit_comp("Count the Number of Trailing Zero Bits")},
{str8_lit_comp("UCOMISD"), str8_lit_comp("Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS")},
{str8_lit_comp("UCOMISS"), str8_lit_comp("Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS")},
{str8_lit_comp("UD"), str8_lit_comp("Undefined Instruction")},
{str8_lit_comp("UMONITOR"), str8_lit_comp("User Level Set Up Monitor Address")},
{str8_lit_comp("UMWAIT"), str8_lit_comp("User Level Monitor Wait")},
{str8_lit_comp("UNPCKHPD"), str8_lit_comp("Unpack and Interleave High Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("UNPCKHPS"), str8_lit_comp("Unpack and Interleave High Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("UNPCKLPD"), str8_lit_comp("Unpack and Interleave Low Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("UNPCKLPS"), str8_lit_comp("Unpack and Interleave Low Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VALIGND"), str8_lit_comp("Align Doubleword/Quadword Vectors")},
{str8_lit_comp("VALIGNQ"), str8_lit_comp("Align Doubleword/Quadword Vectors")},
{str8_lit_comp("VBLENDMPD"), str8_lit_comp("Blend Float64/Float32 Vectors Using an OpMask Control")},
{str8_lit_comp("VBLENDMPS"), str8_lit_comp("Blend Float64/Float32 Vectors Using an OpMask Control")},
{str8_lit_comp("VBROADCAST"), str8_lit_comp("Load with Broadcast Floating-Point Data")},
{str8_lit_comp("VCOMPRESSPD"), str8_lit_comp("Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory")},
{str8_lit_comp("VCOMPRESSPS"), str8_lit_comp("Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory")},
{str8_lit_comp("VCOMPRESSW"), str8_lit_comp("Store Sparse Packed Byte/Word Integer Values into Dense Memory/Register")},
{str8_lit_comp("VCVTNE2PS2BF16"), str8_lit_comp("Convert Two Packed Single Data to One Packed BF16 Data")},
{str8_lit_comp("VCVTNEPS2BF16"), str8_lit_comp("Convert Packed Single Data to Packed BF16 Data")},
{str8_lit_comp("VCVTPD2QQ"), str8_lit_comp("Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers")},
{str8_lit_comp("VCVTPD2UDQ"), str8_lit_comp("Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers")},
{str8_lit_comp("VCVTPD2UQQ"), str8_lit_comp("Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers")},
{str8_lit_comp("VCVTPH2PS"), str8_lit_comp("Convert 16-bit FP values to Single-Precision FP values")},
{str8_lit_comp("VCVTPS2PH"), str8_lit_comp("Convert Single-Precision FP value to 16-bit FP value")},
{str8_lit_comp("VCVTPS2QQ"), str8_lit_comp("Convert Packed Single Precision Floating-Point Values to Packed Signed Quadword Integer Values")},
{str8_lit_comp("VCVTPS2UDQ"), str8_lit_comp("Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values")},
{str8_lit_comp("VCVTPS2UQQ"), str8_lit_comp("Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values")},
{str8_lit_comp("VCVTQQ2PD"), str8_lit_comp("Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VCVTQQ2PS"), str8_lit_comp("Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VCVTSD2USI"), str8_lit_comp("Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer")},
{str8_lit_comp("VCVTSS2USI"), str8_lit_comp("Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer")},
{str8_lit_comp("VCVTTPD2QQ"), str8_lit_comp("Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers")},
{str8_lit_comp("VCVTTPD2UDQ"), str8_lit_comp("Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers")},
{str8_lit_comp("VCVTTPD2UQQ"), str8_lit_comp("Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers")},
{str8_lit_comp("VCVTTPS2QQ"), str8_lit_comp("Convert with Truncation Packed Single Precision Floating-Point Values to Packed Signed Quadword Integer Values")},
{str8_lit_comp("VCVTTPS2UDQ"), str8_lit_comp("Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values")},
{str8_lit_comp("VCVTTPS2UQQ"), str8_lit_comp("Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values")},
{str8_lit_comp("VCVTTSD2USI"), str8_lit_comp("Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer")},
{str8_lit_comp("VCVTTSS2USI"), str8_lit_comp("Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer")},
{str8_lit_comp("VCVTUDQ2PD"), str8_lit_comp("Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VCVTUDQ2PS"), str8_lit_comp("Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VCVTUQQ2PD"), str8_lit_comp("Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VCVTUQQ2PS"), str8_lit_comp("Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VCVTUSI2SD"), str8_lit_comp("Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value")},
{str8_lit_comp("VCVTUSI2SS"), str8_lit_comp("Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value")},
{str8_lit_comp("VDBPSADBW"), str8_lit_comp("Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes")},
{str8_lit_comp("VDPBF16PS"), str8_lit_comp("Dot Product of BF16 Pairs Accumulated into Packed Single Precision")},
{str8_lit_comp("VERR"), str8_lit_comp("Verify a Segment for Reading or Writing")},
{str8_lit_comp("VERW"), str8_lit_comp("Verify a Segment for Reading or Writing")},
{str8_lit_comp("VEXPANDPD"), str8_lit_comp("Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory")},
{str8_lit_comp("VEXPANDPS"), str8_lit_comp("Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory")},
{str8_lit_comp("VEXTRACTF128"), str8_lit_comp("Extr act Packed Floating-Point Values")},
{str8_lit_comp("VEXTRACTF32x4"), str8_lit_comp("Extr act Packed Floating-Point Values")},
{str8_lit_comp("VEXTRACTF32x8"), str8_lit_comp("Extr act Packed Floating-Point Values")},
{str8_lit_comp("VEXTRACTF64x2"), str8_lit_comp("Extr act Packed Floating-Point Values")},
{str8_lit_comp("VEXTRACTF64x4"), str8_lit_comp("Extr act Packed Floating-Point Values")},
{str8_lit_comp("VEXTRACTI128"), str8_lit_comp("Extract packed Integer Values")},
{str8_lit_comp("VEXTRACTI32x4"), str8_lit_comp("Extract packed Integer Values")},
{str8_lit_comp("VEXTRACTI32x8"), str8_lit_comp("Extract packed Integer Values")},
{str8_lit_comp("VEXTRACTI64x2"), str8_lit_comp("Extract packed Integer Values")},
{str8_lit_comp("VEXTRACTI64x4"), str8_lit_comp("Extract packed Integer Values")},
{str8_lit_comp("VFIXUPIMMPD"), str8_lit_comp("Fix Up Special Packed Float64 Values")},
{str8_lit_comp("VFIXUPIMMPS"), str8_lit_comp("Fix Up Special Packed Float32 Values")},
{str8_lit_comp("VFIXUPIMMSD"), str8_lit_comp("Fix Up Special Scalar Float64 Value")},
{str8_lit_comp("VFIXUPIMMSS"), str8_lit_comp("Fix Up Special Scalar Float32 Value")},
{str8_lit_comp("VFMADD132PD"), str8_lit_comp("Fused Multiply-Add of Packed Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD132PS"), str8_lit_comp("Fused Multiply-Add of Packed Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD132SD"), str8_lit_comp("Fused Multiply-Add of Scalar Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD132SS"), str8_lit_comp("Fused Multiply-Add of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMADD213PD"), str8_lit_comp("Fused Multiply-Add of Packed Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD213PS"), str8_lit_comp("Fused Multiply-Add of Packed Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD213SD"), str8_lit_comp("Fused Multiply-Add of Scalar Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD213SS"), str8_lit_comp("Fused Multiply-Add of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMADD231PD"), str8_lit_comp("Fused Multiply-Add of Packed Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD231PS"), str8_lit_comp("Fused Multiply-Add of Packed Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD231SD"), str8_lit_comp("Fused Multiply-Add of Scalar Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMADD231SS"), str8_lit_comp("Fused Multiply-Add of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMADDSUB132PD"), str8_lit_comp("Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFMADDSUB132PS"), str8_lit_comp("Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMADDSUB213PD"), str8_lit_comp("Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFMADDSUB213PS"), str8_lit_comp("Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMADDSUB231PD"), str8_lit_comp("Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFMADDSUB231PS"), str8_lit_comp("Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB132PD"), str8_lit_comp("Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB132PS"), str8_lit_comp("Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB132SD"), str8_lit_comp("Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB132SS"), str8_lit_comp("Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB213PD"), str8_lit_comp("Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB213PS"), str8_lit_comp("Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB213SD"), str8_lit_comp("Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB213SS"), str8_lit_comp("Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB231PD"), str8_lit_comp("Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB231PS"), str8_lit_comp("Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB231SD"), str8_lit_comp("Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUB231SS"), str8_lit_comp("Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values")},
{str8_lit_comp("VFMSUBADD132PD"), str8_lit_comp("Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFMSUBADD132PS"), str8_lit_comp("Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMSUBADD213PD"), str8_lit_comp("Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFMSUBADD213PS"), str8_lit_comp("Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFMSUBADD231PD"), str8_lit_comp("Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFMSUBADD231PS"), str8_lit_comp("Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD132PD"), str8_lit_comp("Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD132PS"), str8_lit_comp("Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD132SD"), str8_lit_comp("Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD132SS"), str8_lit_comp("Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD213PD"), str8_lit_comp("Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD213PS"), str8_lit_comp("Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD213SD"), str8_lit_comp("Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD213SS"), str8_lit_comp("Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD231PD"), str8_lit_comp("Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD231PS"), str8_lit_comp("Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD231SD"), str8_lit_comp("Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMADD231SS"), str8_lit_comp("Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB132PD"), str8_lit_comp("Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB132PS"), str8_lit_comp("Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB132SD"), str8_lit_comp("Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB132SS"), str8_lit_comp("Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB213PD"), str8_lit_comp("Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB213PS"), str8_lit_comp("Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB213SD"), str8_lit_comp("Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB213SS"), str8_lit_comp("Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB231PD"), str8_lit_comp("Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB231PS"), str8_lit_comp("Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB231SD"), str8_lit_comp("Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values")},
{str8_lit_comp("VFNMSUB231SS"), str8_lit_comp("Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values")},
{str8_lit_comp("VFPCLASSPD"), str8_lit_comp("Tests Types Of a Packed Float64 Values")},
{str8_lit_comp("VFPCLASSPS"), str8_lit_comp("Tests Types Of a Packed Float32 Values")},
{str8_lit_comp("VFPCLASSSD"), str8_lit_comp("Tests Types Of a Scalar Float64 Values")},
{str8_lit_comp("VFPCLASSSS"), str8_lit_comp("Tests Types Of a Scalar Float32 Values")},
{str8_lit_comp("VGATHERDPD"), str8_lit_comp("Gather Packed DP FP Values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VGATHERDPS"), str8_lit_comp("Gather Packed SP FP values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VGATHERQPD"), str8_lit_comp("Gather Packed DP FP Values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VGATHERQPS"), str8_lit_comp("Gather Packed SP FP values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VGETEXPPD"), str8_lit_comp("Convert Exponents of Packed DP FP Values to DP FP Values")},
{str8_lit_comp("VGETEXPPS"), str8_lit_comp("Convert Exponents of Packed SP FP Values to SP FP Values")},
{str8_lit_comp("VGETEXPSD"), str8_lit_comp("Convert Exponents of Scalar DP FP Values to DP FP Value")},
{str8_lit_comp("VGETEXPSS"), str8_lit_comp("Convert Exponents of Scalar SP FP Values to SP FP Value")},
{str8_lit_comp("VGETMANTPD"), str8_lit_comp("Extract Float64 Vector of Normalized Mantissas from Float64 Vector")},
{str8_lit_comp("VGETMANTPS"), str8_lit_comp("Extract Float32 Vector of Normalized Mantissas from Float32 Vector")},
{str8_lit_comp("VGETMANTSD"), str8_lit_comp("Extract Float64 of Normalized Mantissas from Float64 Scalar")},
{str8_lit_comp("VGETMANTSS"), str8_lit_comp("Extract Float32 Vector of Normalized Mantissa from Float32 Vector")},
{str8_lit_comp("VINSERTF128"), str8_lit_comp("Insert Packed Floating-Point Values")},
{str8_lit_comp("VINSERTF32x4"), str8_lit_comp("Insert Packed Floating-Point Values")},
{str8_lit_comp("VINSERTF32x8"), str8_lit_comp("Insert Packed Floating-Point Values")},
{str8_lit_comp("VINSERTF64x2"), str8_lit_comp("Insert Packed Floating-Point Values")},
{str8_lit_comp("VINSERTF64x4"), str8_lit_comp("Insert Packed Floating-Point Values")},
{str8_lit_comp("VINSERTI128"), str8_lit_comp("Insert Packed Integer Values")},
{str8_lit_comp("VINSERTI32x4"), str8_lit_comp("Insert Packed Integer Values")},
{str8_lit_comp("VINSERTI32x8"), str8_lit_comp("Insert Packed Integer Values")},
{str8_lit_comp("VINSERTI64x2"), str8_lit_comp("Insert Packed Integer Values")},
{str8_lit_comp("VINSERTI64x4"), str8_lit_comp("Insert Packed Integer Values")},
{str8_lit_comp("VMASKMOV"), str8_lit_comp("Conditional SIMD Packed Loads and Stores")},
{str8_lit_comp("VMOVDQA32"), str8_lit_comp("Move Aligned Packed Integer Values")},
{str8_lit_comp("VMOVDQA64"), str8_lit_comp("Move Aligned Packed Integer Values")},
{str8_lit_comp("VMOVDQU16"), str8_lit_comp("Move Unaligned Packed Integer Values")},
{str8_lit_comp("VMOVDQU32"), str8_lit_comp("Move Unaligned Packed Integer Values")},
{str8_lit_comp("VMOVDQU64"), str8_lit_comp("Move Unaligned Packed Integer Values")},
{str8_lit_comp("VMOVDQU8"), str8_lit_comp("Move Unaligned Packed Integer Values")},
{str8_lit_comp("VP2INTERSECTD"), str8_lit_comp("Compute Intersection Between DWORDS/QUADWORDS to a Pair of Mask Registers")},
{str8_lit_comp("VP2INTERSECTQ"), str8_lit_comp("Compute Intersection Between DWORDS/QUADWORDS to a Pair of Mask Registers")},
{str8_lit_comp("VPBLENDD"), str8_lit_comp("Blend Packed Dwords")},
{str8_lit_comp("VPBLENDMB"), str8_lit_comp("Blend Byte/Word Vectors Using an Opmask Control")},
{str8_lit_comp("VPBLENDMD"), str8_lit_comp("Blend Int32/Int64 Vectors Using an OpMask Control")},
{str8_lit_comp("VPBLENDMQ"), str8_lit_comp("Blend Int32/Int64 Vectors Using an OpMask Control")},
{str8_lit_comp("VPBLENDMW"), str8_lit_comp("Blend Byte/Word Vectors Using an Opmask Control")},
{str8_lit_comp("VPBROADCAST"), str8_lit_comp("Load Integer and Broadcast")},
{str8_lit_comp("VPBROADCASTB"), str8_lit_comp("Load with Broadcast Integer Data from General Purpose Register")},
{str8_lit_comp("VPBROADCASTD"), str8_lit_comp("Load with Broadcast Integer Data from General Purpose Register")},
{str8_lit_comp("VPBROADCASTM"), str8_lit_comp("Broadcast Mask to Vector Register")},
{str8_lit_comp("VPBROADCASTQ"), str8_lit_comp("Load with Broadcast Integer Data from General Purpose Register")},
{str8_lit_comp("VPBROADCASTW"), str8_lit_comp("Load with Broadcast Integer Data from General Purpose Register")},
{str8_lit_comp("VPCMPB"), str8_lit_comp("Compare Packed Byte Values Into Mask")},
{str8_lit_comp("VPCMPD"), str8_lit_comp("Compare Packed Integer Values into Mask")},
{str8_lit_comp("VPCMPQ"), str8_lit_comp("Compare Packed Integer Values into Mask")},
{str8_lit_comp("VPCMPUB"), str8_lit_comp("Compare Packed Byte Values Into Mask")},
{str8_lit_comp("VPCMPUD"), str8_lit_comp("Compare Packed Integer Values into Mask")},
{str8_lit_comp("VPCMPUQ"), str8_lit_comp("Compare Packed Integer Values into Mask")},
{str8_lit_comp("VPCMPUW"), str8_lit_comp("Compare Packed Word Values Into Mask")},
{str8_lit_comp("VPCMPW"), str8_lit_comp("Compare Packed Word Values Into Mask")},
{str8_lit_comp("VPCOMPRESSB"), str8_lit_comp("Store Sparse Packed Byte/Word Integer Values into Dense Memory/Register")},
{str8_lit_comp("VPCOMPRESSD"), str8_lit_comp("Store Sparse Packed Doubleword Integer Values into Dense Memory/Register")},
{str8_lit_comp("VPCOMPRESSQ"), str8_lit_comp("Store Sparse Packed Quadword Integer Values into Dense Memory/Register")},
{str8_lit_comp("VPCONFLICTD"), str8_lit_comp("Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register")},
{str8_lit_comp("VPCONFLICTQ"), str8_lit_comp("Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register")},
{str8_lit_comp("VPDPBUSD"), str8_lit_comp("Multiply and Add Unsigned and Signed Bytes")},
{str8_lit_comp("VPDPBUSDS"), str8_lit_comp("Multiply and Add Unsigned and Signed Bytes with Saturation")},
{str8_lit_comp("VPDPWSSD"), str8_lit_comp("Multiply and Add Signed Word Integers")},
{str8_lit_comp("VPDPWSSDS"), str8_lit_comp("Multiply and Add Signed Word Integers with Saturation")},
{str8_lit_comp("VPERM2F128"), str8_lit_comp("Permute Floating-Point Values")},
{str8_lit_comp("VPERM2I128"), str8_lit_comp("Permute Integer Values")},
{str8_lit_comp("VPERMB"), str8_lit_comp("Permute Packed Bytes Elements")},
{str8_lit_comp("VPERMD"), str8_lit_comp("Permute Packed Doublewords/Words Elements")},
{str8_lit_comp("VPERMI2B"), str8_lit_comp("Full Permute of Bytes from Two Tables Overwriting the Index")},
{str8_lit_comp("VPERMI2D"), str8_lit_comp("Full Permute From Two Tables Overwriting the Index")},
{str8_lit_comp("VPERMI2PD"), str8_lit_comp("Full Permute From Two Tables Overwriting the Index")},
{str8_lit_comp("VPERMI2PS"), str8_lit_comp("Full Permute From Two Tables Overwriting the Index")},
{str8_lit_comp("VPERMI2Q"), str8_lit_comp("Full Permute From Two Tables Overwriting the Index")},
{str8_lit_comp("VPERMI2W"), str8_lit_comp("Full Permute From Two Tables Overwriting the Index")},
{str8_lit_comp("VPERMILPD"), str8_lit_comp("Permute In-Lane of Pairs of Double-Precision Floating-Point Values")},
{str8_lit_comp("VPERMILPS"), str8_lit_comp("Permute In-Lane of Quadruples of Single-Precision Floating-Point Values")},
{str8_lit_comp("VPERMPD"), str8_lit_comp("Permute Double-Precision Floating-Point Elements")},
{str8_lit_comp("VPERMPS"), str8_lit_comp("Permute Single-Precision Floating-Point Elements")},
{str8_lit_comp("VPERMQ"), str8_lit_comp("Qwords Element Permutation")},
{str8_lit_comp("VPERMT2B"), str8_lit_comp("Full Permute of Bytes from Two Tables Overwriting a Table")},
{str8_lit_comp("VPERMT2D"), str8_lit_comp("Full Permute from Two Tables Overwriting one Table")},
{str8_lit_comp("VPERMT2PD"), str8_lit_comp("Full Permute from Two Tables Overwriting one Table")},
{str8_lit_comp("VPERMT2PS"), str8_lit_comp("Full Permute from Two Tables Overwriting one Table")},
{str8_lit_comp("VPERMT2Q"), str8_lit_comp("Full Permute from Two Tables Overwriting one Table")},
{str8_lit_comp("VPERMT2W"), str8_lit_comp("Full Permute from Two Tables Overwriting one Table")},
{str8_lit_comp("VPERMW"), str8_lit_comp("Permute Packed Doublewords/Words Elements")},
{str8_lit_comp("VPEXPANDB"), str8_lit_comp("Expand Byte/Word Values")},
{str8_lit_comp("VPEXPANDD"), str8_lit_comp("Load Sparse Packed Doubleword Integer Values from Dense Memory / Register")},
{str8_lit_comp("VPEXPANDQ"), str8_lit_comp("Load Sparse Packed Quadword Integer Values from Dense Memory / Register")},
{str8_lit_comp("VPEXPANDW"), str8_lit_comp("Expand Byte/Word Values")},
{str8_lit_comp("VPGATHERDD"), str8_lit_comp("Gather Packed Dword Values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VPGATHERDQ"), str8_lit_comp("Gather Packed Dword, Packed Qword with Signed Dword Indices")},
{str8_lit_comp("VPGATHERQD"), str8_lit_comp("Gather Packed Dword Values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VPGATHERQQ"), str8_lit_comp("Gather Packed Qword Values Using Signed Dword/Qword Indices")},
{str8_lit_comp("VPLZCNTD"), str8_lit_comp("Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values")},
{str8_lit_comp("VPLZCNTQ"), str8_lit_comp("Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values")},
{str8_lit_comp("VPMADD52HUQ"), str8_lit_comp("Packed Multiply of Unsigned 52-bit Unsigned Integers and Add High 52-bit Products to 64-bit Accumulators")},
{str8_lit_comp("VPMADD52LUQ"), str8_lit_comp("Packed Multiply of Unsigned 52-bit Integers and Add the Low 52-bit Products to Qword Accumulators")},
{str8_lit_comp("VPMASKMOV"), str8_lit_comp("Conditional SIMD Integer Packed Loads and Stores")},
{str8_lit_comp("VPMOVB2M"), str8_lit_comp("Convert a Vector Register to a Mask")},
{str8_lit_comp("VPMOVD2M"), str8_lit_comp("Convert a Vector Register to a Mask")},
{str8_lit_comp("VPMOVDB"), str8_lit_comp("Down Convert DWord to Byte")},
{str8_lit_comp("VPMOVDW"), str8_lit_comp("Down Convert DWord to Word")},
{str8_lit_comp("VPMOVM2B"), str8_lit_comp("Convert a Mask Register to a Vector Register")},
{str8_lit_comp("VPMOVM2D"), str8_lit_comp("Convert a Mask Register to a Vector Register")},
{str8_lit_comp("VPMOVM2Q"), str8_lit_comp("Convert a Mask Register to a Vector Register")},
{str8_lit_comp("VPMOVM2W"), str8_lit_comp("Convert a Mask Register to a Vector Register")},
{str8_lit_comp("VPMOVQ2M"), str8_lit_comp("Convert a Vector Register to a Mask")},
{str8_lit_comp("VPMOVQB"), str8_lit_comp("Down Convert QWord to Byte")},
{str8_lit_comp("VPMOVQD"), str8_lit_comp("Down Convert QWord to DWord")},
{str8_lit_comp("VPMOVQW"), str8_lit_comp("Down Convert QWord to Word")},
{str8_lit_comp("VPMOVSDB"), str8_lit_comp("Down Convert DWord to Byte")},
{str8_lit_comp("VPMOVSDW"), str8_lit_comp("Down Convert DWord to Word")},
{str8_lit_comp("VPMOVSQB"), str8_lit_comp("Down Convert QWord to Byte")},
{str8_lit_comp("VPMOVSQD"), str8_lit_comp("Down Convert QWord to DWord")},
{str8_lit_comp("VPMOVSQW"), str8_lit_comp("Down Convert QWord to Word")},
{str8_lit_comp("VPMOVSWB"), str8_lit_comp("Down Convert Word to Byte")},
{str8_lit_comp("VPMOVUSDB"), str8_lit_comp("Down Convert DWord to Byte")},
{str8_lit_comp("VPMOVUSDW"), str8_lit_comp("Down Convert DWord to Word")},
{str8_lit_comp("VPMOVUSQB"), str8_lit_comp("Down Convert QWord to Byte")},
{str8_lit_comp("VPMOVUSQD"), str8_lit_comp("Down Convert QWord to DWord")},
{str8_lit_comp("VPMOVUSQW"), str8_lit_comp("Down Convert QWord to Word")},
{str8_lit_comp("VPMOVUSWB"), str8_lit_comp("Down Convert Word to Byte")},
{str8_lit_comp("VPMOVW2M"), str8_lit_comp("Convert a Vector Register to a Mask")},
{str8_lit_comp("VPMOVWB"), str8_lit_comp("Down Convert Word to Byte")},
{str8_lit_comp("VPMULTISHIFTQB"), str8_lit_comp("Select Packed Unaligned Bytes from Quadword Sources")},
{str8_lit_comp("VPOPCNT"), str8_lit_comp("Return the Count of Number of Bits Set to 1 in BYTE/WORD/DWORD/QWORD")},
{str8_lit_comp("VPROLD"), str8_lit_comp("Bit Rotate Left")},
{str8_lit_comp("VPROLQ"), str8_lit_comp("Bit Rotate Left")},
{str8_lit_comp("VPROLVD"), str8_lit_comp("Bit Rotate Left")},
{str8_lit_comp("VPROLVQ"), str8_lit_comp("Bit Rotate Left")},
{str8_lit_comp("VPRORD"), str8_lit_comp("Bit Rotate Right")},
{str8_lit_comp("VPRORQ"), str8_lit_comp("Bit Rotate Right")},
{str8_lit_comp("VPRORVD"), str8_lit_comp("Bit Rotate Right")},
{str8_lit_comp("VPRORVQ"), str8_lit_comp("Bit Rotate Right")},
{str8_lit_comp("VPSCATTERDD"), str8_lit_comp("Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices")},
{str8_lit_comp("VPSCATTERDQ"), str8_lit_comp("Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices")},
{str8_lit_comp("VPSCATTERQD"), str8_lit_comp("Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices")},
{str8_lit_comp("VPSCATTERQQ"), str8_lit_comp("Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices")},
{str8_lit_comp("VPSHLD"), str8_lit_comp("Concatenate and Shift Packed Data Left Logical")},
{str8_lit_comp("VPSHLDV"), str8_lit_comp("Concatenate and Variable Shift Packed Data Left Logical")},
{str8_lit_comp("VPSHRD"), str8_lit_comp("Concatenate and Shift Packed Data Right Logical")},
{str8_lit_comp("VPSHRDV"), str8_lit_comp("Concatenate and Variable Shift Packed Data Right Logical")},
{str8_lit_comp("VPSHUFBITQMB"), str8_lit_comp("Shuffle Bits from Quadword Elements Using Byte Indexes into Mask")},
{str8_lit_comp("VPSLLVD"), str8_lit_comp("Variable Bit Shift Left Logical")},
{str8_lit_comp("VPSLLVQ"), str8_lit_comp("Variable Bit Shift Left Logical")},
{str8_lit_comp("VPSLLVW"), str8_lit_comp("Variable Bit Shift Left Logical")},
{str8_lit_comp("VPSRAVD"), str8_lit_comp("Variable Bit Shift Right Arithmetic")},
{str8_lit_comp("VPSRAVQ"), str8_lit_comp("Variable Bit Shift Right Arithmetic")},
{str8_lit_comp("VPSRAVW"), str8_lit_comp("Variable Bit Shift Right Arithmetic")},
{str8_lit_comp("VPSRLVD"), str8_lit_comp("Variable Bit Shift Right Logical")},
{str8_lit_comp("VPSRLVQ"), str8_lit_comp("Variable Bit Shift Right Logical")},
{str8_lit_comp("VPSRLVW"), str8_lit_comp("Variable Bit Shift Right Logical")},
{str8_lit_comp("VPTERNLOGD"), str8_lit_comp("Bitwise Ternary Logic")},
{str8_lit_comp("VPTERNLOGQ"), str8_lit_comp("Bitwise Ternary Logic")},
{str8_lit_comp("VPTESTMB"), str8_lit_comp("Logical AND and Set Mask")},
{str8_lit_comp("VPTESTMD"), str8_lit_comp("Logical AND and Set Mask")},
{str8_lit_comp("VPTESTMQ"), str8_lit_comp("Logical AND and Set Mask")},
{str8_lit_comp("VPTESTMW"), str8_lit_comp("Logical AND and Set Mask")},
{str8_lit_comp("VPTESTNMB"), str8_lit_comp("Logical NAND and Set")},
{str8_lit_comp("VPTESTNMD"), str8_lit_comp("Logical NAND and Set")},
{str8_lit_comp("VPTESTNMQ"), str8_lit_comp("Logical NAND and Set")},
{str8_lit_comp("VPTESTNMW"), str8_lit_comp("Logical NAND and Set")},
{str8_lit_comp("VRANGEPD"), str8_lit_comp("Range Restriction Calculation For Packed Pairs of Float64 Values")},
{str8_lit_comp("VRANGEPS"), str8_lit_comp("Range Restriction Calculation For Packed Pairs of Float32 Values")},
{str8_lit_comp("VRANGESD"), str8_lit_comp("Range Restriction Calculation From a pair of Scalar Float64 Values")},
{str8_lit_comp("VRANGESS"), str8_lit_comp("Range Restriction Calculation From a Pair of Scalar Float32 Values")},
{str8_lit_comp("VRCP14PD"), str8_lit_comp("Compute Approximate Reciprocals of Packed Float64 Values")},
{str8_lit_comp("VRCP14PS"), str8_lit_comp("Compute Approximate Reciprocals of Packed Float32 Values")},
{str8_lit_comp("VRCP14SD"), str8_lit_comp("Compute Approximate Reciprocal of Scalar Float64 Value")},
{str8_lit_comp("VRCP14SS"), str8_lit_comp("Compute Approximate Reciprocal of Scalar Float32 Value")},
{str8_lit_comp("VREDUCEPD"), str8_lit_comp("Perform Reduction Transformation on Packed Float64 Values")},
{str8_lit_comp("VREDUCEPS"), str8_lit_comp("Perform Reduction Transformation on Packed Float32 Values")},
{str8_lit_comp("VREDUCESD"), str8_lit_comp("Perform a Reduction Transformation on a Scalar Float64 Value")},
{str8_lit_comp("VREDUCESS"), str8_lit_comp("Perform a Reduction Transformation on a Scalar Float32 Value")},
{str8_lit_comp("VRNDSCALEPD"), str8_lit_comp("Round Packed Float64 Values To Include A Given Number Of Fraction Bits")},
{str8_lit_comp("VRNDSCALEPS"), str8_lit_comp("Round Packed Float32 Values To Include A Given Number Of Fraction Bits")},
{str8_lit_comp("VRNDSCALESD"), str8_lit_comp("Round Scalar Float64 Value To Include A Given Number Of Fraction Bits")},
{str8_lit_comp("VRNDSCALESS"), str8_lit_comp("Round Scalar Float32 Value To Include A Given Number Of Fraction Bits")},
{str8_lit_comp("VRSQRT14PD"), str8_lit_comp("Compute Approximate Reciprocals of Square Roots of Packed Float64 Values")},
{str8_lit_comp("VRSQRT14PS"), str8_lit_comp("Compute Approximate Reciprocals of Square Roots of Packed Float32 Values")},
{str8_lit_comp("VRSQRT14SD"), str8_lit_comp("Compute Approximate Reciprocal of Square Root of Scalar Float64 Value")},
{str8_lit_comp("VRSQRT14SS"), str8_lit_comp("Compute Approximate Reciprocal of Square Root of Scalar Float32 Value")},
{str8_lit_comp("VSCALEFPD"), str8_lit_comp("Scale Packed Float64 Values With Float64 Values")},
{str8_lit_comp("VSCALEFPS"), str8_lit_comp("Scale Packed Float32 Values With Float32 Values")},
{str8_lit_comp("VSCALEFSD"), str8_lit_comp("Scale Scalar Float64 Values With Float64 Values")},
{str8_lit_comp("VSCALEFSS"), str8_lit_comp("Scale Scalar Float32 Value With Float32 Value")},
{str8_lit_comp("VSCATTERDPD"), str8_lit_comp("Scatter Packed Single, Packed Double with Signed Dword and Qword Indices")},
{str8_lit_comp("VSCATTERDPS"), str8_lit_comp("Scatter Packed Single, Packed Double with Signed Dword and Qword Indices")},
{str8_lit_comp("VSCATTERQPD"), str8_lit_comp("Scatter Packed Single, Packed Double with Signed Dword and Qword Indices")},
{str8_lit_comp("VSCATTERQPS"), str8_lit_comp("Scatter Packed Single, Packed Double with Signed Dword and Qword Indices")},
{str8_lit_comp("VSHUFF32x4"), str8_lit_comp("Shuffle Packed Values at 128-bit Granularity")},
{str8_lit_comp("VSHUFF64x2"), str8_lit_comp("Shuffle Packed Values at 128-bit Granularity")},
{str8_lit_comp("VSHUFI32x4"), str8_lit_comp("Shuffle Packed Values at 128-bit Granularity")},
{str8_lit_comp("VSHUFI64x2"), str8_lit_comp("Shuffle Packed Values at 128-bit Granularity")},
{str8_lit_comp("VTESTPD"), str8_lit_comp("Packed Bit Test")},
{str8_lit_comp("VTESTPS"), str8_lit_comp("Packed Bit Test")},
{str8_lit_comp("VZEROALL"), str8_lit_comp("Zero XMM, YMM and ZMM Registers")},
{str8_lit_comp("VZEROUPPER"), str8_lit_comp("Zero Upper Bits of YMM and ZMM Registers")},
{str8_lit_comp("WAIT"), str8_lit_comp("Wait")},
{str8_lit_comp("WBINVD"), str8_lit_comp("Write Back and Invalidate Cache")},
{str8_lit_comp("WBNOINVD"), str8_lit_comp("Write Back and Do Not Invalidate Cache")},
{str8_lit_comp("WRFSBASE"), str8_lit_comp("Write FS/GS Segment Base")},
{str8_lit_comp("WRGSBASE"), str8_lit_comp("Write FS/GS Segment Base")},
{str8_lit_comp("WRMSR"), str8_lit_comp("Write to Model Specific Register")},
{str8_lit_comp("WRPKRU"), str8_lit_comp("Write Data to User Page Key Register")},
{str8_lit_comp("WRSSD"), str8_lit_comp("Write to Shadow Stack")},
{str8_lit_comp("WRSSQ"), str8_lit_comp("Write to Shadow Stack")},
{str8_lit_comp("WRUSSD"), str8_lit_comp("Write to User Shadow Stack")},
{str8_lit_comp("WRUSSQ"), str8_lit_comp("Write to User Shadow Stack")},
{str8_lit_comp("XABORT"), str8_lit_comp("Transactional Abort")},
{str8_lit_comp("XACQUIRE"), str8_lit_comp("Hardware Lock Elision Prefix Hints")},
{str8_lit_comp("XADD"), str8_lit_comp("Exchange and Add")},
{str8_lit_comp("XBEGIN"), str8_lit_comp("Transactional Begin")},
{str8_lit_comp("XCHG"), str8_lit_comp("Exchange Register/Memory with Register")},
{str8_lit_comp("XEND"), str8_lit_comp("Transactional End")},
{str8_lit_comp("XGETBV"), str8_lit_comp("Get Value of Extended Control Register")},
{str8_lit_comp("XLAT"), str8_lit_comp("Table Look-up Translation")},
{str8_lit_comp("XLATB"), str8_lit_comp("Table Look-up Translation")},
{str8_lit_comp("XOR"), str8_lit_comp("Logical Exclusive OR")},
{str8_lit_comp("XORPD"), str8_lit_comp("Bitwise Logical XOR of Packed Double Precision Floating-Point Values")},
{str8_lit_comp("XORPS"), str8_lit_comp("Bitwise Logical XOR of Packed Single Precision Floating-Point Values")},
{str8_lit_comp("XRELEASE"), str8_lit_comp("Hardware Lock Elision Prefix Hints")},
{str8_lit_comp("XRSTOR"), str8_lit_comp("Restore Processor Extended States")},
{str8_lit_comp("XRSTORS"), str8_lit_comp("Restore Processor Extended States Supervisor")},
{str8_lit_comp("XSAVE"), str8_lit_comp("Save Processor Extended States")},
{str8_lit_comp("XSAVEC"), str8_lit_comp("Save Processor Extended States with Compaction")},
{str8_lit_comp("XSAVEOPT"), str8_lit_comp("Save Processor Extended States Optimized")},
{str8_lit_comp("XSAVES"), str8_lit_comp("Save Processor Extended States Supervisor")},
{str8_lit_comp("XSETBV"), str8_lit_comp("Set Extended Control Register")},
{str8_lit_comp("XTEST"), str8_lit_comp("Test If In Transactional Execution")},
{str8_lit_comp("ENCLS"), str8_lit_comp("Execute an Enclave System Function of Specified Leaf Number")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EADD] Add a Page to an Uninitialized Enclave")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EAUG] Add a Page to an Initialized Enclave")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EBLOCK] Mark a page in EPC as Blocked")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ECREATE] Create an SECS page in the Enclave Page Cache")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EDBGRD] Read From a Debug Enclave")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EDBGWR] Write to a Debug Enclave")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EEXTEND] Extend Uninitialized Enclave Measurement by 256 Bytes")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EINIT] Initialize an Enclave for Execution")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ELDBC] Load an EPC Page and Mark its State")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ELDB] Load an EPC Page and Mark its State")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ELDUC] Load an EPC Page and Mark its State")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ELDU] Load an EPC Page and Mark its State")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EMODPR] Restrict the Permissions of an EPC Page")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EMODT] Change the Type of an EPC Page")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EPA] Add Version Array")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ERDINFO] Read Type and Status Information About an EPC Page")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EREMOVE] Remove a page from the EPC")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ETRACKC] Activates EBLOCK Checks")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[ETRACK] Activates EBLOCK Checks")},
{str8_lit_comp("ENCLS"), str8_lit_comp("[EWB] Invalidate an EPC Page and Write out to Main Memory")},
{str8_lit_comp("ENCLU"), str8_lit_comp("Execute an Enclave User Function of Specified Leaf Number")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EACCEPTCOPY] Initialize a Pending Page")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EACCEPT] Accept Changes to an EPC Page")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EENTER] Enters an Enclave")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EEXIT] Exits an Enclave")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EGETKEY] Retrieves a Cryptographic Key")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EMODPE] Extend an EPC Page Permissions")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[EREPORT] Create a Cryptographic Report of the Enclave")},
{str8_lit_comp("ENCLU"), str8_lit_comp("[ERESUME] Re-Enters an Enclave")},
{str8_lit_comp("ENCLV"), str8_lit_comp("Execute an Enclave VMM Function of Specified Leaf Number")},
{str8_lit_comp("INVEPT"), str8_lit_comp("Invalidate Translations Derived from EPT")},
{str8_lit_comp("INVVPID"), str8_lit_comp("Invalidate Translations Based on VPID")},
{str8_lit_comp("VMCALL"), str8_lit_comp("Call to VM Monitor")},
{str8_lit_comp("VMCLEAR"), str8_lit_comp("Clear Virtual-Machine Control Structure")},
{str8_lit_comp("VMFUNC"), str8_lit_comp("Invoke VM function")},
{str8_lit_comp("VMLAUNCH"), str8_lit_comp("Launch/Resume Virtual Machine")},
{str8_lit_comp("VMPTRLD"), str8_lit_comp("Load Pointer to Virtual-Machine Control Structure")},
{str8_lit_comp("VMPTRST"), str8_lit_comp("Store Pointer to Virtual-Machine Control Structure")},
{str8_lit_comp("VMREAD"), str8_lit_comp("Read Field from Virtual-Machine Control Structure")},
{str8_lit_comp("VMRESUME"), str8_lit_comp("Launch/Resume Virtual Machine")},
{str8_lit_comp("VMWRITE"), str8_lit_comp("Write Field to Virtual-Machine Control Structure")},
{str8_lit_comp("VMXOFF"), str8_lit_comp("Leave VMX Operation")},
{str8_lit_comp("VMXON"), str8_lit_comp("Enter VMX Operation")},
{str8_lit_comp("PREFETCHWT1"), str8_lit_comp("Prefetch Vector Data Into Caches with Intent to Write and T1 Hint")},
{str8_lit_comp("V4FMADDPS"), str8_lit_comp("Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)")},
{str8_lit_comp("V4FMADDSS"), str8_lit_comp("Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)")},
{str8_lit_comp("V4FNMADDPS"), str8_lit_comp("Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)")},
{str8_lit_comp("V4FNMADDSS"), str8_lit_comp("Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)")},
{str8_lit_comp("VEXP2PD"), str8_lit_comp("Approximation to the Exponential 2^x of Packed Double-Precision Floating-Point Values with Less Than 2^-23 Relative Error")},
{str8_lit_comp("VEXP2PS"), str8_lit_comp("Approximation to the Exponential 2^x of Packed Single-Precision Floating-Point Values with Less Than 2^-23 Relative Error")},
{str8_lit_comp("VGATHERPF0DPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint")},
{str8_lit_comp("VGATHERPF0DPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint")},
{str8_lit_comp("VGATHERPF0QPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint")},
{str8_lit_comp("VGATHERPF0QPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint")},
{str8_lit_comp("VGATHERPF1DPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint")},
{str8_lit_comp("VGATHERPF1DPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint")},
{str8_lit_comp("VGATHERPF1QPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint")},
{str8_lit_comp("VGATHERPF1QPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint")},
{str8_lit_comp("VP4DPWSSD"), str8_lit_comp("Dot Product of Signed Words with Dword Accumulation (4-iterations)")},
{str8_lit_comp("VP4DPWSSDS"), str8_lit_comp("Dot Product of Signed Words with Dword Accumulation and Saturation (4-iterations)")},
{str8_lit_comp("VRCP28PD"), str8_lit_comp("Approximation to the Reciprocal of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRCP28PS"), str8_lit_comp("Approximation to the Reciprocal of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRCP28SD"), str8_lit_comp("Approximation to the Reciprocal of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRCP28SS"), str8_lit_comp("Approximation to the Reciprocal of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRSQRT28PD"), str8_lit_comp("Approximation to the Reciprocal Square Root of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRSQRT28PS"), str8_lit_comp("Approximation to the Reciprocal Square Root of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRSQRT28SD"), str8_lit_comp("Approximation to the Reciprocal Square Root of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VRSQRT28SS"), str8_lit_comp("Approximation to the Reciprocal Square Root of Scalar Single-Precision Floating- Point Value with Less Than 2^-28 Relative Error")},
{str8_lit_comp("VSCATTERPF0DPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF0DPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF0QPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF0QPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF1DPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF1DPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF1QPD"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write")},
{str8_lit_comp("VSCATTERPF1QPS"), str8_lit_comp("Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write")},
};

global B32 DEV_telemetry_capture = 0;
global B32 DEV_simulate_lag = 0;
global B32 DEV_draw_ui_text_pos = 0;
global B32 DEV_draw_ui_focus_debug = 0;
global B32 DEV_draw_ui_box_heatmap = 0;
global B32 DEV_eval_compiler_tooltips = 0;
global B32 DEV_eval_watch_key_tooltips = 0;
global B32 DEV_cmd_context_tooltips = 0;
global B32 DEV_scratch_mouse_draw = 0;
global B32 DEV_updating_indicator = 0;
struct {B32 *value_ptr; String8 name;} DEV_toggle_table[] =
{
{&DEV_telemetry_capture, str8_lit_comp("telemetry_capture")},
{&DEV_simulate_lag, str8_lit_comp("simulate_lag")},
{&DEV_draw_ui_text_pos, str8_lit_comp("draw_ui_text_pos")},
{&DEV_draw_ui_focus_debug, str8_lit_comp("draw_ui_focus_debug")},
{&DEV_draw_ui_box_heatmap, str8_lit_comp("draw_ui_box_heatmap")},
{&DEV_eval_compiler_tooltips, str8_lit_comp("eval_compiler_tooltips")},
{&DEV_eval_watch_key_tooltips, str8_lit_comp("eval_watch_key_tooltips")},
{&DEV_cmd_context_tooltips, str8_lit_comp("cmd_context_tooltips")},
{&DEV_scratch_mouse_draw, str8_lit_comp("scratch_mouse_draw")},
{&DEV_updating_indicator, str8_lit_comp("updating_indicator")},
};
Rng1U64 df_g_cmd_param_slot_range_table[] =
{
{0},
{OffsetOf(DF_CmdParams, window), OffsetOf(DF_CmdParams, window) + sizeof(DF_Handle)},
{OffsetOf(DF_CmdParams, panel), OffsetOf(DF_CmdParams, panel) + sizeof(DF_Handle)},
{OffsetOf(DF_CmdParams, dest_panel), OffsetOf(DF_CmdParams, dest_panel) + sizeof(DF_Handle)},
{OffsetOf(DF_CmdParams, prev_view), OffsetOf(DF_CmdParams, prev_view) + sizeof(DF_Handle)},
{OffsetOf(DF_CmdParams, view), OffsetOf(DF_CmdParams, view) + sizeof(DF_Handle)},
{OffsetOf(DF_CmdParams, entity), OffsetOf(DF_CmdParams, entity) + sizeof(DF_Handle)},
{OffsetOf(DF_CmdParams, entity_list), OffsetOf(DF_CmdParams, entity_list) + sizeof(DF_HandleList)},
{OffsetOf(DF_CmdParams, string), OffsetOf(DF_CmdParams, string) + sizeof(String8)},
{OffsetOf(DF_CmdParams, file_path), OffsetOf(DF_CmdParams, file_path) + sizeof(String8)},
{OffsetOf(DF_CmdParams, text_point), OffsetOf(DF_CmdParams, text_point) + sizeof(TxtPt)},
{OffsetOf(DF_CmdParams, cmd_spec), OffsetOf(DF_CmdParams, cmd_spec) + sizeof(struct DF_CmdSpec *)},
{OffsetOf(DF_CmdParams, view_spec), OffsetOf(DF_CmdParams, view_spec) + sizeof(struct DF_ViewSpec *)},
{OffsetOf(DF_CmdParams, vaddr), OffsetOf(DF_CmdParams, vaddr) + sizeof(U64)},
{OffsetOf(DF_CmdParams, voff), OffsetOf(DF_CmdParams, voff) + sizeof(U64)},
{OffsetOf(DF_CmdParams, index), OffsetOf(DF_CmdParams, index) + sizeof(U64)},
{OffsetOf(DF_CmdParams, id), OffsetOf(DF_CmdParams, id) + sizeof(U64)},
{OffsetOf(DF_CmdParams, prefer_dasm), OffsetOf(DF_CmdParams, prefer_dasm) + sizeof(B32)},
{OffsetOf(DF_CmdParams, force_confirm), OffsetOf(DF_CmdParams, force_confirm) + sizeof(B32)},
};

DF_IconKind df_g_entity_kind_icon_kind_table[] =
{
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Machine,
DF_IconKind_FileOutline,
DF_IconKind_FileOutline,
DF_IconKind_FileOutline,
DF_IconKind_FileOutline,
DF_IconKind_Null,
DF_IconKind_Pin,
DF_IconKind_CircleFilled,
DF_IconKind_CircleFilled,
DF_IconKind_Target,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Threads,
DF_IconKind_Thread,
DF_IconKind_Module,
DF_IconKind_Null,
DF_IconKind_Threads,
DF_IconKind_Null,
DF_IconKind_Null,
DF_IconKind_Null,
};

String8 df_g_entity_kind_display_string_table[] =
{
str8_lit_comp("Nil"),
str8_lit_comp("Root"),
str8_lit_comp("Machine"),
str8_lit_comp("File"),
str8_lit_comp("Override File Link"),
str8_lit_comp("Pending File Change"),
str8_lit_comp("Diagnostics Log"),
str8_lit_comp("Flash Marker"),
str8_lit_comp("Watch Pin"),
str8_lit_comp("Breakpoint"),
str8_lit_comp("Condition"),
str8_lit_comp("Target"),
str8_lit_comp("Executable"),
str8_lit_comp("Arguments"),
str8_lit_comp("Execution Path"),
str8_lit_comp("Entry Point Name"),
str8_lit_comp("Source"),
str8_lit_comp("Destination"),
str8_lit_comp("Control Request"),
str8_lit_comp("Process"),
str8_lit_comp("Thread"),
str8_lit_comp("Module"),
str8_lit_comp("Debug Info Override"),
str8_lit_comp("Pending Thread Name"),
str8_lit_comp("Conversion Task"),
str8_lit_comp("Conversion Failure"),
str8_lit_comp("EndedProcess"),
};

String8 df_g_entity_kind_name_label_table[] =
{
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Expression"),
str8_lit_comp("Label"),
str8_lit_comp("Expression"),
str8_lit_comp("Label"),
str8_lit_comp("Executable"),
str8_lit_comp("Arguments"),
str8_lit_comp("Execution Path"),
str8_lit_comp("Symbol Name"),
str8_lit_comp("Path"),
str8_lit_comp("Path"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
str8_lit_comp("Label"),
};

DF_EntityKindFlags df_g_entity_kind_flags_table[] =
{
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(1*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 1*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 1*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 1*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 1*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 1*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 1*DF_EntityKindFlag_LeafMutationProfileConfig | 1*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 1*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 1*DF_EntityKindFlag_LeafMutationSoftHalt | 1*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 1*DF_EntityKindFlag_TreeMutationSoftHalt | 1*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
(0*DF_EntityKindFlag_LeafMutationUserConfig | 0*DF_EntityKindFlag_LeafMutationProfileConfig | 0*DF_EntityKindFlag_LeafMutationSoftHalt | 0*DF_EntityKindFlag_LeafMutationDebugInfoMap | 0*DF_EntityKindFlag_TreeMutationUserConfig | 0*DF_EntityKindFlag_TreeMutationProfileConfig | 0*DF_EntityKindFlag_TreeMutationSoftHalt | 0*DF_EntityKindFlag_TreeMutationDebugInfoMap | 0*DF_EntityKindFlag_NameIsCode | 0*DF_EntityKindFlag_UserDefinedLifetime),
};

DF_EntityOpFlags df_g_entity_kind_op_flags_table[] =
{
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (1*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(1*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (1*DF_EntityOpFlag_Duplicate),
(1*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (1*DF_EntityOpFlag_Enable) | (1*DF_EntityOpFlag_Condition) | (1*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(1*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (1*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (1*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (1*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (1*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (1*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (0*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(0*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
(1*DF_EntityOpFlag_Delete) | (0*DF_EntityOpFlag_Freeze) | (0*DF_EntityOpFlag_Edit) | (1*DF_EntityOpFlag_Rename) | (0*DF_EntityOpFlag_Enable) | (0*DF_EntityOpFlag_Condition) | (0*DF_EntityOpFlag_Duplicate),
};

String8 df_g_cfg_src_string_table[] =
{
str8_lit_comp("user"),
str8_lit_comp("profile"),
str8_lit_comp("command_line"),
str8_lit_comp("transient"),
};

DF_CoreCmdKind df_g_cfg_src_load_cmd_kind_table[] =
{
DF_CoreCmdKind_OpenUser,
DF_CoreCmdKind_OpenProfile,
DF_CoreCmdKind_Null,
DF_CoreCmdKind_Null,
};

DF_CoreCmdKind df_g_cfg_src_write_cmd_kind_table[] =
{
DF_CoreCmdKind_WriteUserData,
DF_CoreCmdKind_WriteProfileData,
DF_CoreCmdKind_Null,
DF_CoreCmdKind_Null,
};

DF_CoreCmdKind df_g_cfg_src_apply_cmd_kind_table[] =
{
DF_CoreCmdKind_ApplyUserData,
DF_CoreCmdKind_ApplyProfileData,
DF_CoreCmdKind_Null,
DF_CoreCmdKind_Null,
};

String8 df_g_icon_kind_text_table[] =
{
str8_lit_comp(""),
str8_lit_comp("b"),
str8_lit_comp("c"),
str8_lit_comp("B"),
str8_lit_comp("C"),
str8_lit_comp("f"),
str8_lit_comp("F"),
str8_lit_comp("g"),
str8_lit_comp("h"),
str8_lit_comp("r"),
str8_lit_comp("s"),
str8_lit_comp("i"),
str8_lit_comp("w"),
str8_lit_comp("W"),
str8_lit_comp("k"),
str8_lit_comp("K"),
str8_lit_comp("L"),
str8_lit_comp("R"),
str8_lit_comp("U"),
str8_lit_comp("D"),
str8_lit_comp("G"),
str8_lit_comp("P"),
str8_lit_comp("3"),
str8_lit_comp("p"),
str8_lit_comp("O"),
str8_lit_comp("o"),
str8_lit_comp("!"),
str8_lit_comp("1"),
str8_lit_comp("<"),
str8_lit_comp(">"),
str8_lit_comp("^"),
str8_lit_comp("v"),
str8_lit_comp("9"),
str8_lit_comp("0"),
str8_lit_comp("7"),
str8_lit_comp("8"),
str8_lit_comp("+"),
str8_lit_comp("-"),
str8_lit_comp("'"),
str8_lit_comp("\""),
str8_lit_comp("M"),
str8_lit_comp("."),
str8_lit_comp("x"),
str8_lit_comp("q"),
str8_lit_comp("j"),
str8_lit_comp("u"),
str8_lit_comp("m"),
str8_lit_comp("n"),
str8_lit_comp("l"),
str8_lit_comp("a"),
str8_lit_comp("z"),
str8_lit_comp("y"),
str8_lit_comp("X"),
str8_lit_comp("Y"),
str8_lit_comp("S"),
str8_lit_comp("T"),
str8_lit_comp("Z"),
str8_lit_comp("d"),
str8_lit_comp("N"),
str8_lit_comp("E"),
str8_lit_comp("H"),
str8_lit_comp("e"),
str8_lit_comp("I"),
str8_lit_comp("J"),
str8_lit_comp("A"),
str8_lit_comp("?"),
str8_lit_comp("4"),
str8_lit_comp("5"),
str8_lit_comp("c"),
};


#endif // DF_CORE_META_H
